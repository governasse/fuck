<script type="text/javascript">
var wlanObj_2g,
    wlanObj_5g,
    mssidObj_2g,
    mssidObj_5g,
    vapList_2g,
    vapList_5g,
    guestnetObj_2g,
    guestnetObj_5g,
    guestVap_2g,
    guestVap_5g,
    wdsObj_2g,
    wdsObj_5g,
    qssEnable_2g,
    qssEnable_5g;

var wlSettings = {};
wlSettings.band2g = {};
wlSettings.band5g = {};

var wepListTmp2g = [{}, {}, {}, {}];
var wepListTmp5g = [{}, {}, {}, {}];


function isHex(str, arg) {
    str = str.toLowerCase();
    for (var i = 0; i < str.length; i++) {
        if ((str.charAt(i) >= '0' && str.charAt(i) <= '9') || (str.charAt(i) >= 'a' && str.charAt(i) <= 'f'))
            continue;
        else {
            if (arg != 0)
                $.alert(ERR_WLAN_WEP_KEY_HEX_INVALID);
            return false;
        }
    }
    if (parseInt(str, 16) == 0) {
        if (arg != 0)
            $.alert(ERR_WLAN_WEP_KEY_HEX_INVALID);
        return false;
    }
    return true;
}

function checkSSID(band) {
    var s = $('#ssid');
    var ssidLen = $.realLen(s.prop('value'));

    if (INCLUDE_LAN_WLAN_MSSID) {
        /*var index = 1;

        for (index = 1; index < ssidNum; index++) {
            var cp1 = $.id("ssid").value;
            var cp2 = $.id("ssid" + index).value;
            if (cp1 == cp2) {
                $.alert(CMM_WLAN_SSID_CONFLICTE);
                s.focus();
                s.select();
                return false;
            }
        }

        for (index = 1; index < ssidNum; index++) {
            var cp1 = $.id("ssid" + index).value;
            var loop = 0;
            for (loop = index + 1; loop < ssidNum; loop++) {
                var cp2 = $.id("ssid" + loop).value;
                if (cp1 == cp2) {
                    $.alert(CMM_WLAN_SSID_CONFLICTE);
                    $.id("ssid" + index).focus();
                    $.id("ssid" + index).select();
                    return false;
                }
            }
        }*/

        if (INCLUDE_LAN_WLAN_GUESTNETWORK) {
            if (s.prop('value') == guestVap_2g.SSID || s.prop('value') == guestVap_5g.SSID) {
                $.alert(CMM_WLAN_SSID_CONFLICTE_WITH_GUESTNET);
                s.focus();
                s.select();
                return false;
            }
            /*            for (index = 1; index < ssidNum; index++) {
                if ($.id("ssid" + index).value == guestVap.ssid) {
                    $.alert(CMM_WLAN_SSID_CONFLICTE_WITH_GUESTNET);
                    $.id("ssid" + index).focus();
                    $.id("ssid" + index).select();
                    return false;
                }
            }*/
        }
    }
    if (ssidLen <= 0) {
        $.alert(ERR_WLAN_SSID_IS_EMPTY);
        s.focus();
        s.select();
        return false;
    } else if (ssidLen > 32) {
        $.alert(ERR_WLAN_SSID_LEN_OUTRANGE);
        s.focus();
        s.select();
        return false;
    }
    /* else if (INCLUDE_LAN_WLAN_MSSID) {
        for (index = 1; index < ssidNum; index++) {
            var s2 = $.id("ssid" + index);
            var ssidLen2 = $.realLen(s2.value);
            if (ssidLen2 <= 0) {
                $.alert(ERR_WLAN_SSID_IS_EMPTY);
                s2.focus();
                s2.select();
                return false;
            } else if (ssidLen2 > 32) {
                $.alert(ERR_WLAN_SSID_LEN_OUTRANGE);
                s2.focus();
                s2.select();
                return false;
            }
        }
    }*/

    return true;
}

function checkPersonal(band) {
    var t = $('#wpa2PersonalPwd');
    var pwd = t.prop('value');

    if (pwd.length == 0) {
        $.alert(ERR_WLAN_WPA_PSK_EMPTY);
        t.focus();
        t.select();
        return false;
    } else if (pwd.length < 8) {
        $.alert(ERR_WLAN_WPA_PSK_LENGTH_INVALID);
        t.focus();
        t.select();
        return false;
    } else if (pwd.length >= 64) {
        if (!isHex(pwd, 0)) {
            $.alert(ERR_WLAN_WPA_PSK_HEX_INVALID);
            t.focus();
            t.select();
            return false;
        }
        t.prop('value', t.prop('value').substr(0, 64));
    } else {
        if ($.asc(pwd, true)) {
            $.alert(ERR_WLAN_WPA_PSK_ASCII_INVALID);
            t.focus();
            t.select();
            return false;
        }
    }
    /*    if ($.num($.id("interval").value, 0, [30, 999999999], true)) {
        $.alert(ERR_WLAN_WPA_INTERVAL_INVALID);
        return false;
    }*/
    if ((qssEnable_2g == 1 && band == '_2g') ||
        (qssEnable_5g == 1 && band == '_5g')) {
        if ($("#encrypPersonalTkip").prop('checked')) {
            $.alert(ERR_WLAN_QSS_TKIP_CONFLICT);
            return false;
        }
    }
    return true;
}

function checkEnterprise(band) {
    var ip = $('#wpa2EnterpriseIP');
    var port = $('#wpa2EnterprisePort');
    var pwd = $('#wpa2EnterprisePwd');

    if ($.ifip(ip.prop('value'))) {
        ip.focus();
        ip.select();
        return false;
    }

    if (port.prop('value') == 0) {
        port.prop('value', 1812);
    }
    if (port.value > 65535 || port.value < 1) {
        $.alert(ERR_WLAN_WPA_PORT_INVALID);
        port.focus();
        port.select();
        return false;
    }

    if (pwd.prop('value').length == 0) {
        $.alert(ERR_WLAN_WPA_PWD_EMPTY);
        pwd.focus();
        pwd.select();
        return false;
    } else if (pwd.prop('value').length > 64) {
        $.alert(ERR_WLAN_WPA_PWD_INVALID);
        pwd.focus();
        pwd.select();
        return false;
    }
    /*    if ($.num($.id("wpainterval").value, 0, [30, 999999999], true)) {
        $.alert(ERR_WLAN_WPA_INTERVAL_INVALID);
        $.id("wpainterval").focus();
        $.id("wpainterval").select();
        return false;
    }*/
    if ((qssEnable_2g == 1 && band == '_2g') ||
        (qssEnable_5g == 1 && band == '_5g')) {
        if ($("#encrypPersonalTkip").prop('checked')) {
            $.alert(ERR_WLAN_QSS_TKIP_CONFLICT);
            return false;
        }
    }
    return true;
}

function checkWEP(band) {
    var keyIndex = $('#wepShareKey').data('value');
    var keyValue = $('#wepKey' + keyIndex + 'Value');
    var isAcsii = 0;
    var is64 = 0;
    isAcsii = $('#key' + keyIndex + 'FormatAscii').prop('checked') ? 1 : 0;
    is64 = $('#key' + keyIndex + 'Type64').prop('checked') ? 1 : 0;

    if (keyValue.prop('value').length == 0) {
        $.alert(ERR_WLAN_WEP_NO_KEY);
        return false;
    }

    if (isAcsii == 0 && !isHex(keyValue.prop('value'), 1)) {
        keyValue.focus();
        keyValue.select();
        return false;
    }

    if ($.asc(keyValue.prop('value'), true)) {
        $.alert(ERR_WLAN_WEP_KEY_ASCII_INVALID);
        keyValue.focus();
        keyValue.select();
        return false;
    }

    if (keyValue.prop('value').length != ((is64 ? 40 : 104) / (isAcsii ? 8 : 4))) {
        $.alert(ERR_WLAN_WEP_KEY_LENGTH_INVALID);
        keyValue.focus();
        keyValue.select();
        return false;
    }

    return true;
}

function checkValue(band) {
    switch ($('select#sec').data('value')) {
        case '0':
            return true;
            break;
        case '1':
            return checkPersonal(band);
            break;
        case '2':
            return checkEnterprise(band);
            break;
        case '3':
            return checkWEP(band);
            break;
    }
}

function initModeList(wlanObj, band) {
    var modeList = $('#mode');
    var optionStr;
    modeList.empty();
    if (band == '_5g') {
        if (INCLUDE_LAN_WLAN_AC) {
            $.each(strMode_AC, function() {
                optionStr = '<option value="' + this[1] + '">' + this[0] + '</option>';
                modeList.append(optionStr);
            });
        } else {
            $.each(strMode_AN, function() {
                optionStr = '<option value="' + this[1] + '">' + this[0] + '</option>';
                modeList.append(optionStr);
            });
        }
    } else {
        $.each(strMode_N, function() {
            optionStr = '<option value="' + this[1] + '">' + this[0] + '</option>';
            modeList.append(optionStr);
        });
    }

    $('#mode' + ' ' + 'option[value="' + wlanObj.standard + '"]').prop('selected', 'selected');
    /*initBandWidth();*/
}

function initBandWidth(wlanObj, band) {
    var bandWidth = $('#chnwidth');
    var optionStr;
    var index;
    bandWidth.empty();

    if ("KP " == wlanObj.regulatoryDomain || "ID " == wlanObj.regulatoryDomain ||
        (("AM " == wlanObj.regulatoryDomain ||
            "BH " == wlanObj.regulatoryDomain ||
                "CR " == wlanObj.regulatoryDomain ||
                "EC " == wlanObj.regulatoryDomain ||
            "EG " == wlanObj.regulatoryDomain ||
            "SV " == wlanObj.regulatoryDomain ||
            "GL " == wlanObj.regulatoryDomain ||
            "GU " == wlanObj.regulatoryDomain ||
            "JP " == wlanObj.regulatoryDomain ||
            "TN " == wlanObj.regulatoryDomain
        ) && ("_5g" == band))) {
        optionStr = '<option value="20M">20MHz</option>';
        bandWidth.append(optionStr);

        bandWidth.val("20M");
        bandWidth.prop("disabled", true);
        bandWidth.get(0).selectedIndex = 0;
    } else {
        $.each(strBandWidth, function(arg, index) {
            optionStr = '<option value="' + this[1] + '">' + this[0] + '</option>';
            bandWidth.append(optionStr);
        });
        if (INCLUDE_LAN_WLAN_AC && (wlanObj.standard == "ac" || wlanObj.standard == "ac-only" || wlanObj.standard == "nac")) {
            $.each(strBandWidth_AC, function(arg, index) {
               /* if ('UA ' == wlanObj.regulatoryDomain || 'RU ' == wlanObj.regulatoryDomain) {
                    //bandWidth.find('option[value="Auto"]').remove();
                    return true;
                }*/
                optionStr = '<option value="' + this[1] + '">' + this[0] + '</option>';
                bandWidth.append(optionStr);
            });
        }
        bandWidth.prop("disabled", false);

        if (wlanObj.X_TP_Bandwidth == "80M" && wlanObj.standard == "an") {
            bandWidth.get(0).selectedIndex = 0;
        } else {
            $("#chnwidth" + " " + "option[value = " + wlanObj.X_TP_Bandwidth + "]").prop("selected", "selected");
        }
    }
    $("#chnwidth").tpSelect({
        refresh: 1
    });
    wlanObj.X_TP_Bandwidth = bandWidth.val();
}

function initChannel(wlanObj, band) {
    var mask = 0x0;
    var modeValue = wlanObj.standard;
    var chwidthValue = wlanObj.X_TP_Bandwidth;
    var regionIndex;
    var enDFS = 0;
    dfsMask = (1 << IEEE80211_CHAN_REQUIRED_DFS);

    var channel = $('#channel');
    var optionStr;
    channel.empty();
    channel.append('<option value="0">Auto</option>');

    $("#channel_tips").hide();

    if (band == "_2g") {
        mask = $.getWl24gMask(modeValue, chwidthValue);
        channel.prop('disabled', (wdsObj_2g.bridgeEnable == 1) ? true : false);
		if (wdsObj_2g.bridgeEnable == 1)
		{
                        $.errorTip('channel',n_str.wirelessSettings.t_disChannel);
                        $('#channel_tips').css('left',250);
		}		
    } else {
        mask = $.getWl5gMask(modeValue, chwidthValue);

        channel.prop('disabled', (wdsObj_5g.bridgeEnable == 1) ? true : false);
		if (wdsObj_5g.bridgeEnable == 1)
		{
                        $.errorTip('channel',n_str.wirelessSettings.t_disChannel);
                        $('#channel_tips').css('left',250);
		}
    }

    for (var i in regionCodeInfo) {
        if (regionCodeInfo[i][1] == wlanObj.regulatoryDomain)
            regionIndex = i;
    }
    regionIndex = (regionIndex) * region_chan_table_shift

    for (i = 1; i <= TOTAL_CHANNEL; i++) {
        if (Region_chan_table[regionIndex + i] & mask) {

            if (band == "_2g" || (band == "_5g" && (((Region_chan_table[regionIndex + i] & dfsMask) == 0) || ((Region_chan_table[regionIndex + i] & dfsMask) && (enDFS == 1))))) {
               
                optionStr = '<option value="' + chan_index_map[i - 1] + '">' + chan_index_map[i - 1] + '</option>';
                channel.append(optionStr);
            }
        }
    }
  
    if (wlanObj.autoChannelEnable == 1) {
        $('#channel' + ' ' + 'option[value="' + 0 + '"]').prop('selected', 'selected');
    } else {
        $('#channel' + ' ' + 'option[value="' + wlanObj.channel + '"]').prop('selected', 'selected');
    }

    $('select#channel').tpSelect({
        refresh: 1
    })
}

function initPower(wlanObj, band) {
    var powerSupported = wlanObj.transmitPowerSupported.split(',');
    powerSupported.sort(function(a, b) {
        return a - b;
    });
    var powerIndex = $.baseIndexOf(powerSupported, wlanObj.transmitPower);
    switch (powerIndex) {
        case 0:
            $('#powerLow').prop('checked', true);
            $('#powerMiddle').prop('checked', false);
            $('#powerHigh').prop('checked', false);
            break;
        case 1:
            $('#powerLow').prop('checked', false);
            $('#powerMiddle').prop('checked', true);
            $('#powerHigh').prop('checked', false);
            break;
        case 2:
            $('#powerLow').prop('checked', false);
            $('#powerMiddle').prop('checked', false);
            $('#powerHigh').prop('checked', true);
            break;
    }
    $('#powerLow').data('dmNum', powerSupported[0]);
    $('#powerMiddle').data('dmNum', powerSupported[1]);
    $('#powerHigh').data('dmNum', powerSupported[2]);
}

function initParamShow(wlanObj, band) {
    if (wlanObj.enable == 1) {
        $('#wlEn').prop('checked', true);
        $('#wlEn').prop('disabled', false);
    } else if ((wlanObj.regulatoryDomain == 'BD ' ||
            wlanObj.regulatoryDomain == 'KZ ' ||
            wlanObj.regulatoryDomain == 'SY ' ||
            wlanObj.regulatoryDomain == 'YE ') && band == '_5g') {
        $('#wlEn').prop('checked', false);
        $('#wlEn').prop('disabled', true);
    } else {
        $('#wlEn').prop('checked', false);
        $('#wlEn').prop('disabled', false);
    }
    $('#wlEn').data('tpCheckbox').refresh();


    $('#ssid').prop('value', wlanObj.SSID);

    if (wlanObj.SSIDAdvertisementEnabled == 0) {
        $('#hideSSID').prop('checked', true);
    } else {
        $('#hideSSID').prop('checked', false);
    }

    initModeList(wlanObj, band);
    initBandWidth(wlanObj, band);
    initChannel(wlanObj, band);
    initPower(wlanObj, band);
}

function initSecShow(wlanObj, band) {
    initSecType(wlanObj, band);
    initWpa2Personal(wlanObj, band);
    initWpa2Enterprise(wlanObj, band);
    initWep(wlanObj, band);
}

function initSecType(wlanObj, band) {
    if (wlanObj.beaconType == 'Basic' && wlanObj.basicEncryptionModes == 'None') {
        $('#noSec').prop('selected', 'selected');
    } else if (wlanObj.beaconType == 'WPA') {
        if (wlanObj.WPAAuthenticationMode == 'PSKAuthentication') {
            $('#wpa2Personal').prop('selected', 'selected');
        } else {
            $('#wpa2Enterprise').prop('selected', 'selected');
        }
    } else if (wlanObj.beaconType == '11i' || wlanObj.beaconType == 'WPAand11i') {
        if (wlanObj.IEEE11iAuthenticationMode == 'PSKAuthentication') {
            $('#wpa2Personal').prop('selected', 'selected');
        } else {
            $('#wpa2Enterprise').prop('selected', 'selected');
        }
    } else if (wlanObj.beaconType == 'Basic' && wlanObj.basicEncryptionModes == 'WEPEncryption') {
        $('#wep').prop('selected', 'selected');
    }
}

function initWpa2Personal(wlanObj, band) {
    if (wlanObj.beaconType == 'WPAand11i' && wlanObj.WPAAuthenticationMode == 'PSKAuthentication') {
        $('#verPersonalAuto').prop('checked', 'checked');
        if (wlanObj.IEEE11iEncryptionModes == 'TKIPEncryption') {
            $('#encrypPersonalTkip').prop('checked', 'checked');
        } else if (wlanObj.IEEE11iEncryptionModes == 'AESEncryption') {
            $('#encrypPersonalAes').prop('checked', 'checked');
        } else {
            $('#encrypPersonalAuto').prop('checked', 'checked');
        }
    } else if (wlanObj.beaconType == 'WPA' && wlanObj.WPAAuthenticationMode == 'PSKAuthentication') {
        $('#verPersonalWpa').prop('checked', 'checked');
        if (wlanObj.WPAEncryptionModes == 'TKIPEncryption') {
            $('#encrypPersonalTkip').prop('checked', 'checked');
        } else if (wlanObj.WPAEncryptionModes == 'AESEncryption') {
            $('#encrypPersonalAes').prop('checked', 'checked');
        } else {
            $('#encrypPersonalAuto').prop('checked', 'checked');
        }
    } else if (wlanObj.beaconType == '11i' && wlanObj.IEEE11iAuthenticationMode == 'PSKAuthentication') {
        $('#verPersonalWpa2').prop('checked', 'checked');
        if (wlanObj.WPAEncryptionModes == 'TKIPEncryption') {
            $('#encrypPersonalTkip').prop('checked', 'checked');
        } else if (wlanObj.WPAEncryptionModes == 'AESEncryption') {
            $('#encrypPersonalAes').prop('checked', 'checked');
        } else {
            $('#encrypPersonalAuto').prop('checked', 'checked');
        }
    } else {
        $('#verPersonalAuto').prop('checked', 'checked');
        $('#encrypPersonalAuto').prop('checked', 'checked');
    }

    $('#wpa2PersonalPwd').prop('value', wlanObj.X_TP_PreSharedKey);
}

function initWpa2Enterprise(wlanObj, band) {
    if (wlanObj.beaconType == 'WPAand11i' && wlanObj.WPAAuthenticationMode == 'EAPAuthentication') {
        $('#verEnterpriseAuto').prop('checked', 'checked');
        if (wlanObj.IEEE11iEncryptionModes == 'TKIPEncryption') {
            $('#encrypEnterpriseTkip').prop('checked', 'checked');
        } else if (wlanObj.IEEE11iEncryptionModes == 'AESEncryption') {
            $('#encrypEnterpriseAes').prop('checked', 'checked');
        } else {
            $('#encrypEnterpriseAuto').prop('checked', 'checked');
        }
    } else if (wlanObj.beaconType == 'WPA' && wlanObj.WPAAuthenticationMode == 'EAPAuthentication') {
        $('#verEnterpriseWpa').prop('checked', 'checked');
        if (wlanObj.WPAEncryptionModes == 'TKIPEncryption') {
            $('#encrypEnterpriseTkip').prop('checked', 'checked');
        } else if (wlanObj.WPAEncryptionModes == 'AESEncryption') {
            $('#encrypEnterpriseAes').prop('checked', 'checked');
        } else {
            $('#encrypEnterpriseAuto').prop('checked', 'checked');
        }
    } else if (wlanObj.beaconType == '11i' && wlanObj.IEEE11iAuthenticationMode == 'EAPAuthentication') {
        $('#verEnterpriseWpa2').prop('checked', 'checked');
        if (wlanObj.WPAEncryptionModes == 'TKIPEncryption') {
            $('#encrypEnterpriseTkip').prop('checked', 'checked');
        } else if (wlanObj.WPAEncryptionModes == 'AESEncryption') {
            $('#encrypEnterpriseAes').prop('checked', 'checked');
        } else {
            $('#encrypEnterpriseAuto').prop('checked', 'checked');
        }
    } else {
        $('#verEnterpriseAuto').prop('checked', 'checked');
        $('#encrypEnterpriseAuto').prop('checked', 'checked');
    }
    $('#wpa2EnterprisePwd').prop('value', wlanObj.X_TP_RadiusServerPassword);
    $('#wpa2EnterpriseIP').prop('value', wlanObj.X_TP_RadiusServerIP);
    $('#wpa2EnterprisePort').prop('value', wlanObj.X_TP_RadiusServerPort);
}

function initWep(wlanObj, band) {
    if (band == '_2g' && $.isEmptyObject(wepListTmp2g[0])) {
        var wepList = $.act(ACT_GS, LAN_WLAN_WEPKEY, null, wlanObj.__stack, ["WEPKey"]);
        $.exe();
    } else if (band == '_2g') {
        wepList = wepListTmp2g;
    }

    if (band == '_5g' && $.isEmptyObject(wepListTmp5g[0])) {
        var wepList = $.act(ACT_GS, LAN_WLAN_WEPKEY, null, wlanObj.__stack, ["WEPKey"]);
        $.exe();
    } else if (band == '_5g') {
        wepList = wepListTmp5g;
    }
    if (wlanObj.basicAuthenticationMode == 'Auto') {
        $('#typeAuto').prop('checked', 'checked');
    } else if (wlanObj.basicAuthenticationMode == 'None') {
        $('#typeOpenSys').prop('checked', 'checked');
    } else if (wlanObj.basicAuthenticationMode == 'SharedAuthentication') {
        $('#typeSharedKey').prop('checked', 'checked');
    }

    $('#wepShareKey' + ' ' + 'option[value="' + wlanObj.WEPKeyIndex + '"]').prop('selected', 'selected');
    var keyIndex = 1;
    $.each(wepList, function() {
        $('#wepKey' + keyIndex + 'Value').prop('value', this.WEPKey);

        switch ($('#wepKey' + keyIndex + 'Value').prop('value').length) {
            case 5:
                $('#key' + keyIndex + 'Type64').prop('checked', 'checked');
                $('#key' + keyIndex + 'FormatAscii').prop('checked', 'checked');
                break;
            case 10:
                $('#key' + keyIndex + 'Type64').prop('checked', 'checked');
                $('#key' + keyIndex + 'FormatHex').prop('checked', 'checked');
                break;
            case 13:
                $('#key' + keyIndex + 'Type128').prop('checked', 'checked');
                $('#key' + keyIndex + 'FormatAscii').prop('checked', 'checked');
                break;
            case 26:
                $('#key' + keyIndex + 'Type128').prop('checked', 'checked');
                $('#key' + keyIndex + 'FormatHex').prop('checked', 'checked');
                break;
        }

        keyIndex++;
    });

}

function saveDM(wlanObj, band) {
    var wlSettingsTmp = {};
    var type;

    wlSettingsTmp.__stack = wlanObj.__stack;
    wlSettingsTmp.enable = $('#wlEn').prop('data-checked') ? 1 : 0;
    wlSettingsTmp.SSID = $('#ssid').prop('value');
    wlSettingsTmp.SSIDAdvertisementEnabled = $('#hideSSID').prop('data-checked') ? 0 : 1;
    wlSettingsTmp.standard = $('#mode').data('value');
    wlSettingsTmp.X_TP_Bandwidth = $('#chnwidth').data('value');
    if ($('#channel').data('value') == 0) {
        wlSettingsTmp.autoChannelEnable = 1;
    } else {
        wlSettingsTmp.autoChannelEnable = 0;
        wlSettingsTmp.channel = $('#channel').data('value');
    }
    wlSettingsTmp.transmitPower = $('[name="transPower' + '"]:checked').data('dmNum');

    switch ($('select#sec').data('value')) {
        case '0':
            wlSettingsTmp.beaconType = 'Basic';
            wlSettingsTmp.basicEncryptionModes = 'None';
            wlSettingsTmp.basicAuthenticationMode = 'None';
            break;
        case '1':
            if ($('#encrypPersonalAuto').prop('checked')) {
                type = 'TKIPandAESEncryption';
            } else if ($("#encrypPersonalTkip").prop('checked')) {
                type = 'TKIPEncryption';
            } else if ($("#encrypPersonalAes").prop('checked')) {
                type = 'AESEncryption';
            }
            wlSettingsTmp.WPAEncryptionModes = wlSettingsTmp.IEEE11iEncryptionModes = type;
            wlSettingsTmp.WPAAuthenticationMode = wlSettingsTmp.IEEE11iAuthenticationMode = "PSKAuthentication";
            wlSettingsTmp.X_TP_PreSharedKey = $('#wpa2PersonalPwd').prop('value');
            if ($('#verPersonalAuto').prop('checked')) {
                wlSettingsTmp.beaconType = 'WPAand11i';
            } else if ($('#verPersonalWpa').prop('checked')) {
                wlSettingsTmp.beaconType = 'WPA';
            } else if ($('#verPersonalWpa2').prop('checked')) {
                wlSettingsTmp.beaconType = '11i'
            }
            break;
        case '2':
            if ($('#encrypEnterpriseAuto').prop('checked')) {
                type = 'TKIPandAESEncryption';
            } else if ($("#encrypEnterpriseTkip").prop('checked')) {
                type = 'TKIPEncryption';
            } else if ($("#encrypEnterpriseAes").prop('checked')) {
                type = 'AESEncryption';
            }
            wlSettingsTmp.WPAEncryptionModes = wlSettingsTmp.IEEE11iEncryptionModes = type;
            wlSettingsTmp.WPAAuthenticationMode = wlSettingsTmp.IEEE11iAuthenticationMode = "EAPAuthentication";
            wlSettingsTmp.X_TP_RadiusServerPort = $('#wpa2EnterprisePort').prop('value');
            wlSettingsTmp.X_TP_RadiusServerIP = $('#wpa2EnterpriseIP').prop('value');
            wlSettingsTmp.X_TP_RadiusServerPassword = $('#wpa2EnterprisePwd').prop('value');
            if ($('#verEnterpriseAuto').prop('checked')) {
                wlSettingsTmp.beaconType = 'WPAand11i';
            } else if ($('#verEnterpriseWpa').prop('checked')) {
                wlSettingsTmp.beaconType = 'WPA';
            } else if ($('#verEnterpriseWpa2').prop('checked')) {
                wlSettingsTmp.beaconType = '11i'
            }
            break;
        case '3':
            if ($('#typeAuto').prop('checked')) {
                type = "Auto";
            } else if ($('#typeSharedKey').prop('checked')) {
                type = "SharedAuthentication";
            } else {
                type = "None";
            }
            wlSettingsTmp.beaconType = 'Basic';
            wlSettingsTmp.basicAuthenticationMode = type;
            wlSettingsTmp.basicEncryptionModes = 'WEPEncryption';
            wlSettingsTmp.WEPKeyIndex = $('#wepShareKey').data('value');
            break;
    }
    return wlSettingsTmp;
}

function setDM(wlanObj, param) {
    var index = 1;
    var wepList = $.act(ACT_GS, LAN_WLAN_WEPKEY, null, wlanObj.__stack, ["WEPKey"]);
    $.exe();
    $.each(wepList, function() {
        $.act(ACT_SET, LAN_WLAN_WEPKEY, this.__stack, null, ["WEPKey=" + $('#wepKey' + index + 'Value').prop('value')]);
        index++;
    });
    $.act(ACT_SET, LAN_WLAN, wlanObj.__stack, null, param);

    $.exe(function() {
        initDM();
        $.removeLoading();
    });
}

function clickSave(wlanObj, band) {
    if (checkSSID(band) == false) {
        return;
    }
    if (checkValue(band) == false) {
        return;
    }

    wlSettings = saveDM(wlanObj, band);
    setDM(wlanObj, wlSettings);
}

function clickSec(band) {
    switch ($('select#sec').data('value')) {
        case '0':
            $("[id^='hide']").fadeOut(1);
            break;
        case '1':
            $("[id^='hide']").fadeOut(1);
            $("#hideWpa2Personal").fadeIn(1);
            break;
        case '2':
            $("[id^='hide']").fadeOut(1);
            $("#hideWpa2Enterprise").fadeIn(1);
            break;
        case '3':
            $("[id^='hide']").fadeOut(1);
            $("#hideWep").fadeIn(1);
            $('select#wepShareKey').click();
            break;
    }
}

function clickWep(band) {
    if ($('#hideWep').is(':hidden') || $('select#sec').data('value') != '3') {
        return;
    }
    switch ($('select#wepShareKey').data('value')) {
        case '1':
            $("[id^='hideKey']").fadeOut(1);
            $("#hideKey1").fadeIn(1);
            break;
        case '2':
            $("[id^='hideKey']").fadeOut(1);
            $("#hideKey2").fadeIn(1);
            break;
        case '3':
            $("[id^='hideKey']").fadeOut(1);
            $("#hideKey3").fadeIn(1);
            break;
        case '4':
            $("[id^='hideKey']").fadeOut(1);
            $("#hideKey4").fadeIn(1);
            break;
    }
}

function focusWepValue(band) {
    var keyIndex = $('#wepShareKey').data('value');
    var isAcsii = 0;
    var is64 = 0;
    if ($('#key' + keyIndex + 'FormatAscii').prop('checked')) {
        isAcsii = '1';
    } else {
        isAcsii = '0';
    }
    if ($('#key' + keyIndex + 'Type64').prop('checked')) {
        is64 = '1';
    } else {
        is64 = '0';
    }
    switch (isAcsii + is64) {
        case '11':
            $('#wepKey' + keyIndex + 'Value').prop('maxlength', '5');
            break;
        case '10':
            $('#wepKey' + keyIndex + 'Value').prop('maxlength', '13');
            break;
        case '01':
            $('#wepKey' + keyIndex + 'Value').prop('maxlength', '10');
            break;
        case '00':
            $('#wepKey' + keyIndex + 'Value').prop('maxlength', '26');
            break;
    }

}

function initDM() {
    var basicList = $.act(ACT_GL, LAN_WLAN, null, null, ["Name",
        "Standard",
        "SSID",
        "X_TP_Band",
        "RegulatoryDomain",
        "PossibleChannels",
        "AutoChannelEnable",
        "Channel",
        "X_TP_Bandwidth",
        "Enable",
        "SSIDAdvertisementEnabled",
        "BeaconType",
        "BasicEncryptionModes",
        "WPAEncryptionModes",
        "IEEE11iEncryptionModes",
        "X_TP_Configuration_Modified",
        "WMMEnable",
        "X_TP_FragmentThreshold",
        "beaconType",
        "WEPEncryptionLevel",
        "WEPKeyIndex",
        "BasicEncryptionModes",
        "BasicAuthenticationMode",
        "WPAEncryptionModes",
        "WPAAuthenticationMode",
        "IEEE11iEncryptionModes",
        "IEEE11iAuthenticationMode",
        "X_TP_PreSharedKey",
        "X_TP_GroupKeyUpdateInterval",
        "TransmitPowerSupported",
        "TransmitPower",
        "X_TP_RadiusServerIP",
        "X_TP_RadiusServerPort",
        "X_TP_RadiusServerPassword"
    ]);
    if (!$.exe()) {
        $.each(basicList, function() {
            if ("2.4GHz" == this.X_TP_Band) {
                wlanObj_2g = this;
            } else if (INCLUDE_LAN_WLAN_DUALBAND && "5GHz" == this.X_TP_Band) {
                wlanObj_5g = this;
            }
        });

        wpsObj_2g = $.act(ACT_GET, LAN_WLAN_WPS, wlanObj_2g.__stack, null, ["Enable"]);
        wpsObj_5g = $.act(ACT_GET, LAN_WLAN_WPS, wlanObj_5g.__stack, null, ["Enable"]);
        mssidObj_2g = $.act(ACT_GET, LAN_WLAN_MULTISSID, wlanObj_2g.__stack, null, ["MultiSSIDEnable"]);
        mssidObj_5g = $.act(ACT_GET, LAN_WLAN_MULTISSID, wlanObj_5g.__stack, null, ["MultiSSIDEnable"]);
        vapList_2g = $.act(ACT_GS, LAN_WLAN_MSSIDENTRY, null, wlanObj_2g.__stack, ["Name", "Enable", "SSID", "SSIDAdvertisementEnable", "isolateClients", "BeaconType", "BasicAuthenticationMode", "WEPKeyIndex", "BasicEncryptionModes", "WPAEncryptionModes", "WPAAuthenticationMode", "IEEE11iEncryptionModes", "IEEE11iAuthenticationMode", "PreSharedKey", "GroupKeyUpdateInterval", "RadiusServerIP", "RadiusServerPort", "RadiusServerPassword"]);
        vapList_5g = $.act(ACT_GS, LAN_WLAN_MSSIDENTRY, null, wlanObj_5g.__stack, ["Name", "Enable", "SSID", "SSIDAdvertisementEnable", "isolateClients", "BeaconType", "BasicAuthenticationMode", "WEPKeyIndex", "BasicEncryptionModes", "WPAEncryptionModes", "WPAAuthenticationMode", "IEEE11iEncryptionModes", "IEEE11iAuthenticationMode", "PreSharedKey", "GroupKeyUpdateInterval", "RadiusServerIP", "RadiusServerPort", "RadiusServerPassword"]);

        guestnetObj_2g = $.act(ACT_GET, LAN_WLAN_GUESTNET, wlanObj_2g.__stack, null, ["Enable", "Name"]);
        guestnetObj_5g = $.act(ACT_GET, LAN_WLAN_GUESTNET, wlanObj_5g.__stack, null, ["Enable", "Name"]);
        wdsObj_2g = $.act(ACT_GET, LAN_WLAN_WDSBRIDGE, wlanObj_2g.__stack, null, ["BridgeEnable"]);
        wdsObj_5g = $.act(ACT_GET, LAN_WLAN_WDSBRIDGE, wlanObj_5g.__stack, null, ["BridgeEnable"]);
        if (!$.exe()) {
            qssEnable_2g = wpsObj_2g.enable;
            qssEnable_5g = wpsObj_5g.enable;
            $.each(vapList_2g, function(arg, index) {
                if (this.name == guestnetObj_2g.name)
                    guestVap_2g = this;
            });
            $.each(vapList_5g, function(arg, index) {
                if (this.name == guestnetObj_5g.name)
                    guestVap_5g = this;
            });
        }
    }
}

function clickMode(wlanObj, band) {
    wlanObj.standard = $("select#mode").data("value");
    initBandWidth(wlanObj, band);
    initChannel(wlanObj, band);
}

function clickChannel(wlanObj, band) {
    if ($('#channel').data('value') == 0) {
        wlanObj.autoChannelEnable = 1;
    } else {
        wlanObj.autoChannelEnable = 0;
        wlanObj.channel = $('#channel').data('value');
    }
}

function clickChnWidth(wlanObj, band) {
    wlanObj.X_TP_Bandwidth = $("select#chnwidth").data("value");
    initChannel(wlanObj, band);
}

function init() {
    initDM();
    initParamShow(wlanObj_2g, '_2g');
    initSecShow(wlanObj_2g, '_2g');
}

$('select#sec').on('click.wlSettings', function(e) {
    clickSec('_2g');
});

$('select#wepShareKey').on('click.wlSettings', function(e) {
    clickWep('_2g');
});

$("select#chnwidth").on("click", function() {

    if ($('#load_5g').hasClass('mode-select')) {
        clickChnWidth(wlanObj_5g, '_5g');
    } else {
        clickChnWidth(wlanObj_2g, '_2g');
    }
});

$("select#channel").on("click", function() {
    if ($('#load_5g').hasClass('mode-select')) {
        clickChannel(wlanObj_5g, '_5g');
    } else {
        clickChannel(wlanObj_2g, '_2g');
    }
});

$("select#mode").on("click", function() {
    var mode = $(this).data('value');
    var sec = $('select#sec').data('value');
    if (mode == 'n-only' || mode == 'nac') {
        $('#encrypPersonalAuto').prop('disabled', true)
            .prop('checked', false)
            .data('tpRadio').refresh();
        $('#encrypPersonalTkip').prop('disabled', true)
            .prop('checked', false)
            .data('tpRadio').refresh();
        $('#encrypPersonalAes').prop('checked', true)
            .data('tpRadio').refresh();

        $('#encrypEnterpriseAuto').prop('disabled', true)
            .prop('checked', false)
            .data('tpRadio').refresh();
        $('#encrypEnterpriseTkip').prop('disabled', true)
            .prop('checked', false)
            .data('tpRadio').refresh();
        $('#encrypEnterpriseAes').prop('checked', true)
            .data('tpRadio').refresh();
    } else if ($('#verPersonalWpa2').prop('checked') == false) {
        $('#encrypPersonalAuto').prop('disabled', false)
            .data('tpRadio').refresh();
        $('#encrypPersonalTkip').prop('disabled', false)
            .data('tpRadio').refresh();
        $('#encrypEnterpriseAuto').prop('disabled', false)
            .data('tpRadio').refresh();
        $('#encrypEnterpriseTkip').prop('disabled', false)
            .data('tpRadio').refresh();
    }
    if ($('#load_5g').hasClass('mode-select')) {
        clickMode(wlanObj_5g, '_5g');
    } else {
        clickMode(wlanObj_2g, '_2g');
    }

});

$('#save').on('click.wlSettings', function(e) {
    $.addLoading($(this));
    if ($('#load_5g').hasClass('mode-select')) {
        clickSave(wlanObj_5g, '_5g');
    } else {
        clickSave(wlanObj_2g, '_2g');
    }
});

$('input[name="wepKeyValue"]').on('focus.wlSettings', function(e) {
    focusWepValue('_2g');
});
$('input[name="wepKeyValue"]').on('focus.wlSettings', function(e) {
    focusWepValue('_5g');
});

$('#verPersonalWpa2').on('click.wlSettings', function(e) {
    $('#encrypPersonalAuto').prop('disabled', true)
        .prop('checked', false)
        .data('tpRadio').refresh();
    $('#encrypPersonalTkip').prop('disabled', true)
        .prop('checked', false)
        .data('tpRadio').refresh();
    $('#encrypPersonalAes').prop('checked', true)
        .data('tpRadio').refresh();
});

$('#verEnterpriseWpa2').on('click.wlSettings', function(e) {
    $('#encrypEnterpriseAuto').prop('disabled', true)
        .prop('checked', false)
        .data('tpRadio').refresh();
    $('#encrypEnterpriseTkip').prop('disabled', true)
        .prop('checked', false)
        .data('tpRadio').refresh();
    $('#encrypEnterpriseAes').prop('checked', true)
        .data('tpRadio').refresh();
});

$('#verPersonalAuto').on('click.wlSettings', function(e) {
    var mode = $('select#mode').data('value');
    if (mode == 'n-only' || mode == 'nac') {
        return;
    }

    $('#encrypPersonalAuto').prop('disabled', false)
        .data('tpRadio').refresh();
    $('#encrypPersonalTkip').prop('disabled', false)
        .data('tpRadio').refresh();
});

$('#verEnterpriseAuto').on('click.wlSettings', function(e) {
    var mode = $('select#mode').data('value');
    if (mode == 'n-only' || mode == 'nac') {
        return;
    }
    $('#encrypEnterpriseAuto').prop('disabled', false)
        .data('tpRadio').refresh();
    $('#encrypEnterpriseTkip').prop('disabled', false)
        .data('tpRadio').refresh();
});

$('#load_2g').on('click.wlSettings', function(e) {
    if ($(this).hasClass('mode-select')) {
        return;
    } else {
        $(this).siblings('span.mode-select').removeClass('mode-select');
        $(this).addClass('mode-select');
    }
    if ($.isEmptyObject(wlSettings.band2g) == false) {
        $.extend(wlanObj_2g, wlSettings.band2g);
    }
    wlSettings.band5g = saveDM(wlanObj_5g, '_5g');
    wlSettings.band5g.possibleChannels = wlanObj_5g.possibleChannels;
    wlSettings.band5g.transmitPowerSupported = wlanObj_5g.transmitPowerSupported;
    if ($('select#sec').data('value') == 3) {
        for (var i = 0; i < 4; i++) {
            switch (i) {
                case 0:
                    wepListTmp5g[0].WEPKey = $('#wepKey1Value').prop('value');
                    break;
                case 1:
                    wepListTmp5g[1].WEPKey = $('#wepKey2Value').prop('value');
                    break;
                case 2:
                    wepListTmp5g[2].WEPKey = $('#wepKey3Value').prop('value');
                    break;
                case 3:
                    wepListTmp5g[3].WEPKey = $('#wepKey4Value').prop('value');
                    break;
            }
        }
    }
    initParamShow(wlanObj_2g, '_2g');
    initSecShow(wlanObj_2g, '_2g');

    var options = {};
    options.refresh = 1;
    $('select').each(function() {
        $(this).tpSelect(options);
    });

    $("input[type='checkbox']").each(function() {
        $(this).data('tpCheckbox').refresh();
    });

    $("input[type='radio']").each(function() {
        $(this).data('tpRadio').refresh();
    });
});
$('#load_5g').on('click.wlSettings', function(e) {
    if ($(this).hasClass('mode-select')) {
        return;
    } else {
        $(this).siblings('span.mode-select').removeClass('mode-select');
        $(this).addClass('mode-select');
    }
    if ($.isEmptyObject(wlSettings.band5g) == false) {
        $.extend(wlanObj_5g, wlSettings.band5g);
    }
    wlSettings.band2g = saveDM(wlanObj_2g, '_2g');
    wlSettings.band2g.possibleChannels = wlanObj_2g.possibleChannels;
    wlSettings.band2g.transmitPowerSupported = wlanObj_2g.transmitPowerSupported;
    if ($('select#sec').data('value') == 3) {
        for (var i = 0; i < 4; i++) {
            switch (i) {
                case 0:
                    wepListTmp2g[0].WEPKey = $('#wepKey1Value').prop('value');
                    break;
                case 1:
                    wepListTmp2g[1].WEPKey = $('#wepKey2Value').prop('value');
                    break;
                case 2:
                    wepListTmp2g[2].WEPKey = $('#wepKey3Value').prop('value');
                    break;
                case 3:
                    wepListTmp2g[3].WEPKey = $('#wepKey4Value').prop('value');
                    break;
            }
        }
    }
    initParamShow(wlanObj_5g, '_5g');
    initSecShow(wlanObj_5g, '_5g');

    var options = {};
    options.refresh = 1;
    $('select').each(function() {
        $(this).tpSelect(options);
    });

    $("input[type='checkbox']").each(function() {
        $(this).data('tpCheckbox').refresh();
    });

    $("input[type='radio']").each(function() {
        $(this).data('tpRadio').refresh();
    });
});


</script>
<h3 class="T_wl">Wireless</h3>
<div class="content-container">
    <form class="pure-form pure-form-aligned">
       
        <div class="mode-change load-page">
            <span class="mode-select T_modeghz24" id="load_2g">2.4GHz</span>
            <span class="T_modeghz5" id="load_5g">5GHz</span>
        </div>
        <div>
            <b class="T_wlradio xl">Wireless radio:</b>
            <input type="checkbox" id="wlEn" />
            <label class="T_wlradioen">Enable Wireless Radio</label>
        </div>

        <div class="inline">
            <b class="T_wlname xl">Name(SSID):</b>
            <input type="text" maxlength="32" class="xl" id="ssid" />
        </div>
        <div class="inline">
            <input type="checkbox" id="hideSSID" />
            <label class="T_hidessid">Hide SSID</label>
        </div>

        <b class="T_wlsec xl">Security:</b>
        <select id="sec" class="xxl">
            <option value="0" class="T_wldissec" id="noSec">No Security</option>
            <option value="1" class="T_wlsecpersonalrec" id="wpa2Personal">WPA/WPA2 Personal(Recommended)</option>
            <option value="2" class="T_wlsecenterprise" id="wpa2Enterprise">WPA/WPA2 Enterprise</option>
            <option value="3" id="wep">WEP</option>
        </select>
        <div id="hideWpa2Personal" class="nd">
            <div>
                <b class="T_version xl">Version:</b>
                <input type="radio" name="versionPersonal" id="verPersonalAuto" />
                <label class="T_auto">Auto</label>
                <input type="radio" name="versionPersonal" id="verPersonalWpa2" />
                <label class="T_wpa2">WPA2-PSK</label>
            </div>

            <div>
                <b class="T_encryption xl">Encryption:</b>
                <input type="radio" name="encryptionPersonal" id="encrypPersonalAuto" />
                <label class="T_auto">Auto</label>
                <input type="radio" name="encryptionPersonal" id="encrypPersonalTkip" />
                <label>TKIP</label>
                <input type="radio" name="encryptionPersonal" id="encrypPersonalAes" />
                <label>AES</label>
            </div>

            <div class="pure-control-group">
                <b class="T_wlpwd xl">Wireless Password:</b>
                <input type="text" maxlength="64" class="tp-input-text xl" id="wpa2PersonalPwd" />
            </div>
        </div>
        <div id="hideWpa2Enterprise" class="nd">
            <div>
                <b class="T_version xl">Version:</b>
                <input type="radio" name="versionEnterprise" id="verEnterpriseAuto" />
                <label class="T_auto">Auto</label>
                <input type="radio" name="versionEnterprise" id="verEnterpriseWpa2" />
                <label class="T_wpa2nopsk">WPA2</label>
            </div>

            <div>
                <b class="T_encryption xl">Encryption:</b>
                <input type="radio" name="encryptionEnterprise" id="encrypEnterpriseAuto" />
                <label class="T_auto">Auto</label>
                <input type="radio" name="encryptionEnterprise" id="encrypEnterpriseTkip" />
                <label>TKIP</label>
                <input type="radio" name="encryptionEnterprise" id="encrypEnterpriseAes" />
                <label>AES</label>
            </div>

            <div>
                <b class="xl" id="t_srvIp">Radius Server IP:</b>
                <input type="text" class="tp-input-text xl" id="wpa2EnterpriseIP" />
            </div>
            <div>
                <b class="xl" id="t_srvPort">RADIUS Server Port:</b>
                <input type="text" maxlength="5" class="tp-input-text xl" id="wpa2EnterprisePort" />
            </div>
            <div>
                <b class="xl" id="t_srvPwd">RADIUS Server Password:</b>
                <input type="text" class="tp-input-text xl" id="wpa2EnterprisePwd" />
            </div>
        </div>

        <div id="hideWep" class="nd">
            <div>
                <b class="T_type xl">Type:</b>
                <input type="radio" name="wepType" id="typeAuto" />
                <label class="T_auto">Auto</label>
                <input type="radio" name="wepType" id="typeOpenSys" />
                <label class="T_opensys">Open System</label>
                <input type="radio" name="wepType" id="typeSharedKey" />
                <label class="T_sharekey">Shared Key</label>
            </div>
            <b class="xl" id="t_selkey">Key Selected:</b>
            <select id="wepShareKey" class="xl">
                <option value="1" id="key1" class="T_wepkey1">Key 1</option>
                <option value="2" id="key2" class="T_wepkey2">Key 2</option>
                <option value="3" id="key3" class="T_wepkey3">key 3</option>
                <option value="4" id="key4" class="T_wepkey4">Key 4</option>
            </select>
        </div>
        <div id="hideKey1" class="nd">
            <div>
                <b class="T_weptype xl">Key Format:</b>
                <input type="radio" name="key1Format" id="key1FormatAscii" checked="true" />
                <label>ASCII</label>
                <input type="radio" name="key1Format" id="key1FormatHex" />
                <label class="T_hex">Hexadecimal</label>
            </div>
            <div>
                <b class="T_keytype xl">key Type:</b>
                <input type="radio" name="key1Type" id="key1Type64" checked="true" />
                <label class="T_bit64">64-Bit</label>
                <input type="radio" name="key1Type" id="key1Type128" />
                <label class="T_bit128">128-Bit</label>
            </div>
            <div>
                <b class="T_keyvalue xl">Key Value:</b>
                <input type="text" class="tp-input-text xl" name="wepKeyValue" id="wepKey1Value" />
            </div>
        </div>
        <div id="hideKey2" class="nd">
            <div>
                <b class="T_weptype xl">Key Format:</b>
                <input type="radio" name="key2Format" id="key2FormatAscii" checked="true" />
                <label>ASCII</label>
                <input type="radio" name="key2Format" id="key2FormatHex" />
                <label class="T_hex">Hexadecimal</label>
            </div>
            <div>
                <b class="T_keytype xl">key Type:</b>
                <input type="radio" name="key2Type" id="key2Type64" checked="true" />
                <label class="T_bit64">64-Bit</label>
                <input type="radio" name="key2Type" id="key2Type128" />
                <label class="T_bit128">128-Bit</label>
            </div>
            <div>
                <b class="T_keyvalue xl">Key Value:
                </b>
                <input type="text" class="tp-input-text xl" name="wepKeyValue" id="wepKey2Value" />
            </div>
        </div>
        <div id="hideKey3" class="nd">
            <div>
                <b class="T_weptype xl">Key Format:</b>
                <input type="radio" name="key3Format" id="key3FormatAscii" checked="true" />
                <label>ASCII</label>
                <input type="radio" name="key3Format" id="key3FormatHex" />
                <label class="T_hex">Hexadecimal</label>
            </div>
            <div>
                <b class="T_keytype xl">key Type:</b>
                <input type="radio" name="key3Type" id="key3Type64" checked="true" />
                <label class="T_bit64">64-Bit</label>
                <input type="radio" name="key3Type" id="key3Type128" />
                <label class="T_bit128">128-Bit</label>
            </div>
            <div>
                <b class="T_keyvalue xl">Key Value:
                </b>
                <input type="text" class="tp-input-text xl" name="wepKeyValue" id="wepKey3Value" />
            </div>
        </div>
        <div id="hideKey4" class="nd">
            <div>
                <b class="T_weptype xl">Key Format:</b>
                <input type="radio" name="key4Format" id="key4FormatAscii" checked="true" />
                <label>ASCII</label>
                <input type="radio" name="key4Format" id="key4FormatHex" />
                <label class="T_hex">Hexadecimal</label>
            </div>
            <div>
                <b class="T_keytype xl">key Type:</b>
                <input type="radio" name="key4Type" id="key4Type64" checked="true" />
                <label class="T_bit64">64-Bit</label>
                <input type="radio" name="key4Type" id="key4Type128" />
                <label class="T_bit128">128-Bit</label>
            </div>
            <div>
                <b class="T_keyvalue xl">Key Value:
                </b>
                <input type="text" class="tp-input-text xl" name="wepKeyValue" id="wepKey4Value" />
            </div>
        </div>


        <b class="T_mode xl">Mode:</b>
        <select id="mode" class="xl">
        </select>

        <b class="T_channel xl">Channel:</b>
        <select id="channel" class="xl">
        </select>
        <div class="widget-error-tips" id="channel_tips" style="display: none;">
            <span class="widget-error-tips-delta"></span>
            <div class="widget-error-tips-wrap">
			<div class="content error-tips-content">
				<span id="channel_tips_content"></span>
			</div>
			</div>
		</div>

        <b class="T_chnwidth xl">Channel Width:</b>
        <select id="chnwidth" class="xl">
        </select>

        <div>
            <b class="xl" id="t_txpow">Transmit Power:</b>
            <input type="radio" name="transPower" id="powerLow" />
            <label id="t_low">Low</label>
            <input type="radio" name="transPower" id="powerMiddle" />
            <label id="t_middle">Middle</label>
            <input type="radio" name="transPower" id="powerHigh" />
            <label id="t_high">High</label>
        </div>
        <button type="submit" class="green T_save" id="save">Save</button>
    </form>
</div>

<script type="text/javascript">
$(document).ready(function() {
    $.tpInit(init);
});
</script>
