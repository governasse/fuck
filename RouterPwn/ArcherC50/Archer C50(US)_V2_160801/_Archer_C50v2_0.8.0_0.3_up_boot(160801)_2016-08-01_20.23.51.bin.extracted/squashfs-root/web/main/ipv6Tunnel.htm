<script language="javascript" type="text/javascript">
function changeMecha() {
    var val = getValueIpv6();
    if (val.mechanism === '0') {
        $("#wan6_select").hasClass("nd") ? $("#wan6_select").removeClass("nd") : '';
        $("#wan_select").hasClass("nd") ? '' : $("#wan_select").addClass("nd");
        $("#conf_type").hasClass("nd") ? $("#conf_type").removeClass("nd") : '';
        $("#dslite_elem").hasClass("nd") ? $("#dslite_elem").removeClass("nd") : '';
        $("#6rd_elem").hasClass("nd") ? '' : $("#6rd_elem").addClass("nd");

        if (dsliteTunnel.dynamic == 1) {
            $("#tunnel_auto").prop("checked", 1);
            $("#tunnel_manual").prop("checked", 0);
        } else {
            $("#tunnel_auto").prop("checked", 0);
            $("#tunnel_manual").prop("checked", 1);
        }
    } else if (val.mechanism === '1') {
        $("#wan6_select").hasClass("nd") ? '' : $("#wan6_select").addClass("nd");;
        $("#wan_select").hasClass("nd") ? $("#wan_select").removeClass("nd") : '';
        $("#conf_type").hasClass("nd") ? $("#conf_type").removeClass("nd") : '';
        $("#dslite_elem").hasClass("nd") ? '' : $("#dslite_elem").addClass("nd");
        $("#6rd_elem").hasClass("nd") ? $("#6rd_elem").removeClass("nd") : '';

        if (sit6rdTunnel.dynamic == 1) {
            $("#tunnel_auto").prop("checked", 1);
            $("#tunnel_manual").prop("checked", 0);
        } else {
            $("#tunnel_auto").prop("checked", 0);
            $("#tunnel_manual").prop("checked", 1);
        }
    } else if (val.mechanism === '2') {
        $("#wan6_select").hasClass("nd") ? '' : $("#wan6_select").addClass("nd");;
        $("#wan_select").hasClass("nd") ? $("#wan_select").removeClass("nd") : '';
        $("#conf_type").hasClass("nd") ? '' : $("#conf_type").addClass("nd");
        $("#dslite_elem").hasClass("nd") ? '' : $("#dslite_elem").addClass("nd");
        $("#6rd_elem").hasClass("nd") ? '' : $("#6rd_elem").addClass("nd");
    }
    $('#tunnel_auto').tpRadio();
    $('#tunnel_manual').tpRadio();
}

function changeType(val) {
    if (val.mechanism === '0') {
        $("#tunnel_raddr").prop("disabled", !val.type);
    } else if (val.mechanism === '1') {
        $("#masklen").prop("disabled", !val.type);
        $("#pre").prop("disabled", !val.type);
        $("#prelen").prop("disabled", !val.type);
        $("#relayaddr").prop("disabled", !val.type);
    }
}

function sync(val) {
    var turn = function(bool) {
        $("#tunnel_mecha").prop("disabled", bool);
        $("#tunnel_wan6inf").prop("disabled", bool);
        $("#tunnel_waninf").prop("disabled", bool);

        $("#tunnel_mecha").tpSelect({
            refresh: 1
        });
        $("#tunnel_wan6inf").tpSelect({
            refresh: 1
        });
        $("#tunnel_waninf").tpSelect({
            refresh: 1
        });

        $("#tunnel_auto").prop("disabled", bool);
        $("#tunnel_manual").prop("disabled", bool);
        $("#tunnel_raddr").prop("disabled", bool);

        $('#tunnel_auto').tpRadio();
        $('#tunnel_manual').tpRadio();
    };
    turn(!val.en);
}

function getValueIpv6() {
    var val = {};
    val.en = $("#tunnelen").prop("data-checked") ? 1 : 0;
    val.type = $("#tunnel_auto").prop("checked") ? 0 : 1;
    val.mechanism = $("#tunnel_mecha").data('value');
    val.mechanism = (val.mechanism === undefined) ? '0' : val.mechanism;
    return val;
}
$("#t_save").on("click", function(e) {
    $.addLoading($(this));
    save();
});

function checkDSLiteAttr(obj) {
    if (!isValidGLUIP6AddrStrict(obj.remoteIPv6Address)) {
        $.removeLoading($.id("saveBtn"));
        var element = $.id("raddr");
        if (element) {
            element.focus();
            element.select();
        }
        $.alert(ERR_TUNNEL6_DSLITE_REMOTE_INVALID);
        return false;
    }

    return true;
}

function check6rdAttr(obj) {
    if ($.num(obj.IPv4MaskLen, [1, 32], true)) {
        $.removeLoading($.id("saveBtn"));
        var element = $.id("masklen");
        if (element) {
            element.focus();
            element.select();
        }
        $.alert(ERR_TUNNEL6_6RD_IP_MASK_LEN_INVALID);
        return false;
    }

    if (!isValidIP6Prefix(obj.prefix)) {
        $.removeLoading($.id("saveBtn"));
        var element = $.id("pre");
        if (element) {
            element.focus();
            element.select();
        }
        $.alert(ERR_TUNNEL6_6RD_PREFIX_INVALID);
        return false;
    }

    if ($.num(obj.prefixLen, [1, 32], true)) {
        $.removeLoading($.id("saveBtn"));
        var element = $.id("prelen");
        if (element) {
            element.focus();
            element.select();
        }
        $.alert(ERR_TUNNEL6_6RD_PREFIX_LEN_INVALID);
        return false;
    }

    if ($.ifip(obj.borderRelayIPv4Address, true)) {
        $.removeLoading($.id("saveBtn"));
        var element = $.id("relayaddr");
        if (element) {
            element.focus();
            element.select();
        }
        $.alert(ERR_TUNNEL6_6RD_BR_INVALID);
        return false;
    }

    return true;
}

function isValidIP6Prefix(ip6Prefix) {
    var len = 0;
    var flag = true;
    var temStr = "";
    var num = 0;

    regExp = /::/;
    if (flag) {
        if (regExp.test(ip6Prefix)) {
            regExp = /^([a-f]|[A-F]|[0-9])*(::)([a-f]|[A-F]|[0-9])*(::)([a-f]|[A-F]|[0-9])*$/;
            if (regExp.test(ip6Prefix)) {
                flag = false;
            } else {
                var index = ip6Prefix.indexOf("::");
                var len = ip6Prefix.length;
                var substr1 = ip6Prefix.substr(0, index);
                var substr2 = ip6Prefix.substr(index + 2, len - index - 2);
                regExp = /^(([a-f]|[A-F]|[0-9]){1,4}(:)){0,6}([a-f]|[A-F]|[0-9]){1,4}$/;
                var num = 0;

                if ("" == substr1 && "" == substr2) {
                    flag = false;
                } else if ("" == substr2) {
                    if (!regExp.test(substr1)) {
                        flag = false;
                    }
                } else if ("" == substr1) {
                    if (!regExp.test(substr2)) {
                        flag = false;
                    }
                } else if (!regExp.test(substr1) || !regExp.test(substr2)) {
                    flag = false;
                } else if (regExp.test(substr1) && regExp.test(substr2)) {
                    for (var i = 0; i < substr1.length; i++) {
                        if (substr1.charAt(i) == ":") {
                            num += 1;
                        }
                    }

                    for (var i = 0; i < substr2.length; i++) {
                        if (substr1.charAt(i) == ":") {
                            num += 1;
                        }
                    }

                    if (num > 5) {
                        flag = false;
                    }
                }
            }
        } else {
            regExp = /^(([a-f]|[A-F]|[0-9]){1,4}(:)){7}([a-f]|[A-F]|[0-9]){1,4}$/;
            if (!regExp.test(ip6Prefix)) {
                flag = false;
            }
        }
    }

    return flag;
}

function isValidGLUIP6AddrStrict(ip6Addr) {
    var flag;
    var regExp = /^(:|[a-f]|[A-F]|[0-9]){1,39}$/;
    if (regExp.test(ip6Addr)) {
        flag = true;
    } else {
        flag = false;
    }

    regExp = /::/;
    if (flag) {
        if (regExp.test(ip6Addr)) {
            regExp = /^([a-f]|[A-F]|[0-9])*(::)([a-f]|[A-F]|[0-9])*(::)([a-f]|[A-F]|[0-9])*$/;
            if (regExp.test(ip6Addr)) {
                flag = false;
            } else {
                var index = ip6Addr.indexOf("::");
                var len = ip6Addr.length;
                var substr1 = ip6Addr.substr(0, index);
                var substr2 = ip6Addr.substr(index + 2, len - index - 2);
                regExp = /^(([a-f]|[A-F]|[0-9]){1,4}(:)){0,6}([a-f]|[A-F]|[0-9]){1,4}$/;
                var num = 0;

                if ("" == substr1 && "" == substr2) {
                    flag = false;
                } else if ("" == substr2) {
                    flag = false;
                } else if ("" == substr1) {

                    if (!regExp.test(substr2)) {
                        flag = false;
                    }
                } else if (!regExp.test(substr1) || !regExp.test(substr2)) {
                    flag = false;
                } else if (regExp.test(substr1) && regExp.test(substr2)) {
                    for (var i = 0; i < substr1.length; i++) {
                        if (substr1.charAt(i) == ":") {
                            num += 1;
                        }
                    }

                    for (var i = 0; i < substr2.length; i++) {
                        if (substr1.charAt(i) == ":") {
                            num += 1;
                        }
                    }

                    if (num > 5) {
                        flag = false;
                    }
                }
            }
        } else {
            regExp = /^(([a-f]|[A-F]|[0-9]){1,4}(:)){7}([a-f]|[A-F]|[0-9]){1,4}$/;
            if (!regExp.test(ip6Addr)) {
                flag = false;
            }
        }
    }

    if (flag) {
        var index;
        index = ip6Addr.indexOf(":");
        var substr = ip6Addr.substr(0, index);
        if (0 == index || parseInt(substr, 16) == 0) {
            regExp = /^((0{0,4})|::|:)*$/;
            if (regExp.test(ip6Addr)) {
                flag = false;
            }

            regExp = /^(((0){0,4})|::|:)*((0){0,3}(1))$/;
            if (regExp.test(ip6Addr)) {
                flag = false;
            }
        } else if (parseInt(substr, 16) >= 65280) {
            flag = false;
        } else if (parseInt(substr, 16) >= 65152 && parseInt(substr, 16) <= 65215) {
            flag = true;
        } else {
            if (parseInt(substr, 16) >= 8192 && parseInt(substr, 16) <= 16383) {
                flag = true;
            }
        }
    }

    return flag;
}

function initWan() {
    var index = 0;
    var sel = $("#tunnel_waninf");

    for (var i = 0; i < wanIpList.length; i++) {
        if (wanIpList[i].enable == 1 && wanIpList[i].X_TP_IPv4Enabled == 1 && wanIpList[i].connectionType != "IP_Bridged" && wanIpList[i].connectionStatus == "Connected") {
            var option = {};
            option.value = wanIpList[i].__stack;
            option.text = wanIpList[i].name;
            sel.append("<option value='" + 'ip:' + option.value + "'>" + option.text + "</option>");

            try {
                sel.tpSelect({
                    refresh: 1
                });
            } catch (e) {
                sel.tpSelect({
                    refresh: 1
                });
            }
            index++;
            if (wanIpList[i].X_TP_IfName == mainTunnel.associatedWanIfName) {
                sel.selectedIndex = index - 1;
            }
        }
    }

    for (var j = 0; j < wanPppList.length; j++) {
        if (wanPppList[j].enable == 1 && wanPppList[j].X_TP_IPv4Enabled == 1 && wanPppList[j].connectionStatus == "Connected") {
            var option = {};
            option.value = wanPppList[j].__stack;
            option.text = wanPppList[j].name;
            sel.append("<option value='" + 'ppp:' + option.value + "'>" + option.text + "</option>");

            try {
                sel.tpSelect({
                    refresh: 1
                });
            } catch (e) {
                sel.tpSelect({
                    refresh: 1
                });
            }
            index++;
            if (wanPppList[j].X_TP_IfName == mainTunnel.associatedWanIfName) {
                sel.selectedIndex = index - 1;
            }
        }
    }

    if (index == 0) {
        var option = {};
        option.value = 0;
        option.text = "No available interface.";
        sel.append("<option value='" + option.value + "'>" + option.text + "</option>");

        try {
            sel.tpSelect({
                refresh: 1
            });
        } catch (e) {
            sel.tpSelect({
                refresh: 1
            });
        }
    }
    $("#tunnel_waninf option").eq(sel.selectedIndex).prop("selected", "selected");
}

function initWan6() {
    var index = 0;
    var sel = $("#tunnel_wan6inf");

    for (var i = 0; i < wanIpList.length; i++) {
        if (wanIpList[i].enable == 1 && wanIpList[i].X_TP_IPv6Enabled == 1 && wanIpList[i].X_TP_IPv6ConnStatus == "Connected") {
            var option = {};
            option.value = wanIpList[i].__stack;
            option.text = wanIpList[i].name;
            sel.append("<option value='" + 'ip:' + option.value + "'>" + option.text + "</option>");

            try {
                sel.tpSelect({
                    refresh: 1
                });
            } catch (e) {
                sel.tpSelect({
                    refresh: 1
                });
            }
            index++;

            if (wanIpList[i].X_TP_IfName == mainTunnel.associatedWanIfName) {
                sel.selectedIndex = index - 1;
            }
        }
    }
    for (var j = 0; j < wanPppList.length; j++) {
        if (wanPppList[j].enable == 1 && wanPppList[j].X_TP_IPv6Enabled == 1 && wanPppList[j].X_TP_IPv6ConnStatus == "Connected") {
            var option = {};
            option.value = wanPppList[j].__stack;
            option.text = wanPppList[j].name;
            sel.append("<option value='" + 'ppp:' + option.value + "'>" + option.text + "</option>");

            try {
                sel.tpSelect({
                    refresh: 1
                });
            } catch (e) {
                sel.tpSelect({
                    refresh: 1
                });
            }
            index++;

            if (wanPppList[j].X_TP_IfName == mainTunnel.associatedWanIfName) {
                sel.selectedIndex = index - 1;
            }
        }
    }

    if (index == 0) {
        var option = {};
        option.value = 0;
        option.text = "No available interface.";
        sel.append("<option value='" + option.value + "'>" + option.text + "</option>");

        try {
            sel.tpSelect({
                refresh: 1
            });
        } catch (e) {
            sel.tpSelect({
                refresh: 1
            });
        }
    }
    $("#tunnel_wan6inf option").eq(sel.selectedIndex).prop("selected", "selected");
}

function initTunnel() {
    mainTunnel = $.act(ACT_GET, IP6_TUNNEL, null, null);
    dsliteTunnel = $.act(ACT_GET, DSLITE, null, null);
    sit6rdTunnel = $.act(ACT_GET, SIT_6RD, null, null);

    wanIpList = $.act(ACT_GL, WAN_IP_CONN, null, null);
    wanPppList = $.act(ACT_GL, WAN_PPP_CONN, null, null);

    $.exe(function(err) {
        if (!err) {
            initWan();
            initWan6();

            $("#tunnelen").prop("checked", (mainTunnel.enabled == 1) ? 1 : 0);
            $("#tunnel_raddr").val(dsliteTunnel.remoteIPv6Address ? dsliteTunnel.remoteIPv6Address : "::");

            $("#masklen").val(sit6rdTunnel.IPv4MaskLen);
            $("#pre").val(sit6rdTunnel.prefix ? sit6rdTunnel.prefix : "::");
            $("#prelen").val(sit6rdTunnel.prefixLen);
            $("#relayaddr").val(sit6rdTunnel.borderRelayIPv4Address ? sit6rdTunnel.borderRelayIPv4Address : "0.0.0.0");

            if (mainTunnel.mechanism == 0) {
                $("#t_dslite").prop("selected", 1);
                $("#tunnel_auto").prop("checked", dsliteTunnel.dynamic === '0' ? 0 : 1);
            } else if (mainTunnel.mechanism == 1) {
                $("#t_6rd").prop("selected", 1);
                $("#tunnel_auto").prop("checked", sit6rdTunnel.dynamic === '0' ? 0 : 1);
            } else if (mainTunnel.mechanism == 2) {
                $("#t_6to4").prop("selected", 1);
            }

            $("#tunnelen").tpCheckbox();
            sync(getValueIpv6());
            changeType(getValueIpv6());

            if (mainTunnel.enabled == 1) {
                if (mainTunnel.mechanism == 0) {
                    for (var i = 0; i < wanIpList.length; i++) {
                        if (wanIpList[i].connectionStatus == "Connected" && wanIpList[i].connectionType != "IP_Bridged") {
                            $.alert(ERR_TUNNEL6_DSLITE_WAN_CONN_ERR);
                            return;
                        }

                    }
                    for (var i = 0; i < wanPppList.length; i++) {
                        if (wanPppList[i].connectionStatus == "Connected") {
                            $.alert(ERR_TUNNEL6_DSLITE_WAN_CONN_ERR);
                            return;
                        }
                    }
                } else if (mainTunnel.mechanism == 1) {
                    for (var i = 0; i < wanIpList.length; i++) {
                        if (wanIpList[i].X_TP_IPv6ConnStatus == "Connected") {
                            $.alert(ERR_TUNNEL6_6RD_WAN_CONN_ERR);
                            return;
                        }
                    }
                    for (var i = 0; i < wanPppList.length; i++) {
                        if (wanPppList[i].X_TP_IPv6ConnStatus == "Connected") {
                            $.alert(ERR_TUNNEL6_6RD_WAN_CONN_ERR);
                            return;
                        }
                    }
                } else if (mainTunnel.mechanism == 2) {
                    for (var i = 0; i < wanIpList.length; i++) {
                        if (wanIpList[i].X_TP_IPv6ConnStatus == "Connected") {
                            $.alert(ERR_TUNNEL6_6TO4_WAN_CONN_ERR);
                            return;
                        }
                    }
                    for (var i = 0; i < wanPppList.length; i++) {
                        if (wanPppList[i].X_TP_IPv6ConnStatus == "Connected") {
                            $.alert(ERR_TUNNEL6_6TO4_WAN_CONN_ERR);
                            return;
                        }
                    }
                }
            }
        }
    });
}

function init() {
    initTunnel();
    changeMecha();

    sync(getValueIpv6());
    $("#tunnelen").click(function() {
        sync(getValueIpv6());
    });
    $("#tunnel_mecha").on('click.wlSettings', function() {
        changeMecha();
        changeType(getValueIpv6());
    });
    $("#tunnel_auto").click(function() {
        changeType(getValueIpv6());
    });
    $("#tunnel_manual").click(function() {
        changeType(getValueIpv6());
    });
}

function save() {
    var wan6InfName;
    var wanInfName;
    var tunnelAttrs = {};
    var dsliteAttrs = {};
    var sit6rdAttrs = {};

    tunnelAttrs.enabled = ($("#tunnelen").prop("checked") == 1) ? 1 : 0;

    if ($("#tunnel_mecha").data("value") == 0) {
        tunnelAttrs.mechanism = 0;
        if (tunnelAttrs.enabled == 1) {
            for (var i = 0; i < wanIpList.length; i++) {
                if (wanIpList[i].connectionStatus == "Connected" && wanIpList[i].connectionType != "IP_Bridged") {
                    $.removeLoading();
                    $.alert(ERR_TUNNEL6_DSLITE_WAN_CONN_ERR);
                    return;
                }
            }
            for (var i = 0; i < wanPppList.length; i++) {
                if (wanPppList[i].connectionStatus == "Connected") {
                    $.removeLoading();
                    $.alert(ERR_TUNNEL6_DSLITE_WAN_CONN_ERR);
                    return;
                }
            }
        }


        wan6InfName = $("#tunnel_wan6inf").data("text");
        if ((!wan6InfName) || (wan6InfName == "No available interface.")) {
            $.removeLoading();
            $.alert(ERR_IP6_WAN_CONN_NONE);
            return;
        }

        for (var i = 0; i < wanIpList.length; i++) {
            if (wanIpList[i].name == wan6InfName) {
                tunnelAttrs.associatedWanIfName = wanIpList[i].X_TP_IfName;
                tunnelAttrs.localAddress = wanIpList[i].X_TP_ExternalIPv6Address;
            }
        }
        for (var i = 0; i < wanPppList.length; i++) {
            if (wanPppList[i].name == wan6InfName) {
                tunnelAttrs.associatedWanIfName = wanPppList[i].X_TP_IfName;
                tunnelAttrs.localAddress = wanPppList[i].X_TP_ExternalIPv6Address;
            }
        }
    } else if ($("#tunnel_mecha").data("value") == 1) {
        tunnelAttrs.mechanism = 1;

        if (tunnelAttrs.enabled == 1) {
            for (var i = 0; i < wanIpList.length; i++) {
                if (wanIpList[i].X_TP_IPv6ConnStatus == "Connected") {
                    $.removeLoading();
                    $.alert(ERR_TUNNEL6_6RD_WAN_CONN_ERR);
                    return;
                }
            }
            for (var i = 0; i < wanPppList.length; i++) {
                if (wanPppList[i].X_TP_IPv6ConnStatus == "Connected") {
                    $.removeLoading();
                    $.alert(ERR_TUNNEL6_6RD_WAN_CONN_ERR);
                    return;
                }
            }
        }

        wanInfName = $("#tunnel_waninf").data("text");
        if ((!wanInfName) || (wanInfName == "No available interface.")) {
            $.removeLoading();
            $.alert(ERR_IP6_WAN_CONN_NONE);
            return;
        }

        for (var i = 0; i < wanIpList.length; i++) {
            if (wanIpList[i].name == wanInfName) {
                if ($("#tunnel_auto").prop("checked") == 1 && wanIpList[i].addressingType == "Static") {
                    $.removeLoading();
                    $.alert(ERR_TUNNEL6_6RD_NOT_SUPPORT_AUTO);
                    return;
                }

                tunnelAttrs.associatedWanIfName = wanIpList[i].X_TP_IfName;
                tunnelAttrs.localAddress = wanIpList[i].externalIPAddress;
                break;
            }
        }

        for (var i = 0; i < wanPppList.length; i++) {
            if (wanPppList[i].name == wanInfName) {
                if ($("#tunnel_auto").prop("checked") == 1) {
                    $.removeLoading();
                    $.alert(ERR_TUNNEL6_6RD_NOT_SUPPORT_AUTO);
                    return;
                }

                tunnelAttrs.associatedWanIfName = wanPppList[i].X_TP_IfName;
                tunnelAttrs.localAddress = wanPppList[i].externalIPAddress;
                break;
            }
        }
    } else if ($("#tunnel_mecha").data("value") == 2) {
        tunnelAttrs.mechanism = 2;
        if (tunnelAttrs.enabled == 1) {
            for (var i = 0; i < wanIpList.length; i++) {
                if (wanIpList[i].X_TP_IPv6ConnStatus == "Connected") {
                    $.removeLoading();
                    $.alert(ERR_TUNNEL6_6TO4_WAN_CONN_ERR);
                    return;
                }
            }
            for (var i = 0; i < wanPppList.length; i++) {
                if (wanPppList[i].X_TP_IPv6ConnStatus == "Connected") {
                    $.removeLoading();
                    $.alert(ERR_TUNNEL6_6TO4_WAN_CONN_ERR);
                    return;
                }
            }
        }

        wanInfName = $("#tunnel_waninf").data("text");
        if ((!wanInfName) || (wanInfName == "No available interface.")) {
            $.removeLoading();
            $.alert(ERR_IP6_WAN_CONN_NONE);
            return;
        }

        for (var i = 0; i < wanIpList.length; i++) {
            if (wanIpList[i].name == wanInfName) {
                tunnelAttrs.associatedWanIfName = wanIpList[i].X_TP_IfName;
                tunnelAttrs.localAddress = wanIpList[i].externalIPAddress;
                break;
            }
        }

        for (var i = 0; i < wanPppList.length; i++) {
            if (wanPppList[i].name == wanInfName) {
                tunnelAttrs.associatedWanIfName = wanPppList[i].X_TP_IfName;
                tunnelAttrs.localAddress = wanPppList[i].externalIPAddress;
                break;
            }
        }

        $.act(ACT_SET, SIT_6RD, null, null, ["enabled=0"]);
    }
    $.removeLoading();
    $.act(ACT_SET, IP6_TUNNEL, null, null, tunnelAttrs);

    $.exe(function(err) {
        if (!err) {
            if ($("#tunnel_mecha").data("value") == 0) {
                var isDynamic;
                isDynamic = ($("#tunnel_auto").prop("checked") == 1) ? 1 : 0;
                if (tunnelAttrs.enabled == 1) {
                    for (var i = 0; i < wanIpList.length; i++) {
                        if ((wanIpList[i].X_TP_IfName == tunnelAttrs.associatedWanIfName)) {
                            $.act(ACT_SET, WAN_IP_CONN, wanIpList[i].__stack, null, ["X_TP_DSLiteEnabled=" + isDynamic]);
                            break;
                        }
                    }
                    for (var i = 0; i < wanPppList.length; i++) {
                        if ((wanPppList[i].X_TP_IfName == tunnelAttrs.associatedWanIfName)) {
                            $.act(ACT_SET, WAN_PPP_CONN, wanPppList[i].__stack, null, ["X_TP_DSLiteEnabled=" + isDynamic]);
                            break;
                        }
                    }
                }
                dsliteAttrs.dynamic = isDynamic;
                if (dsliteAttrs.dynamic == 0) {

                    dsliteAttrs.remoteIPv6Address = $("#tunnel_raddr").val();
                    if (!checkDSLiteAttr(dsliteAttrs)) {
                        return;
                    }
                }
                dsliteAttrs.enabled = 1;
                sit6rdAttrs.enabled = 0;
            } else if ($("#tunnel_mecha").data("value") == 1) {
                var isDynamic;
                isDynamic = ($("#tunnel_auto").prop("checked") == 1) ? 1 : 0;

                if (tunnelAttrs.enabled == 1) {
                    for (var i = 0; i < wanIpList.length; i++) {
                        if ((wanIpList[i].X_TP_IfName == tunnelAttrs.associatedWanIfName)) {
                            $.act(ACT_SET, WAN_IP_CONN, wanIpList[i].__stack, null, ["X_TP_Sit6rdEnabled=" + isDynamic]);
                            break;
                        }
                    }
                }
                sit6rdAttrs.dynamic = isDynamic;
                if (sit6rdAttrs.dynamic == 0) {
                    sit6rdAttrs.IPv4MaskLen = $("#masklen").val();
                    sit6rdAttrs.prefix = $("#pre").val();
                    sit6rdAttrs.prefixLen = $("#prelen").val();
                    sit6rdAttrs.borderRelayIPv4Address = $("#relayaddr").val();
                    if (!check6rdAttr(sit6rdAttrs)) {
                        return;
                    }
                }

                dsliteAttrs.enabled = 0;
                sit6rdAttrs.enabled = 1;
            } else if ($("#tunnel_mecha").data("value") == 2) {
                dsliteAttrs.enabled = 0;
                sit6rdAttrs.enabled = 0;
            }

            $.act(ACT_SET, DSLITE, null, null, dsliteAttrs);
            $.act(ACT_SET, SIT_6RD, null, null, sit6rdAttrs);
            $.exe(function(ret) {
                if (!ret) $.loadMain("ipv6Tunnel.htm");
            });
        }
    });
}
</script>
<h3 id="t_et">IPv6 Tunnel</h3>
<div class="content-container">
    <form class="pure-form pure-form-aligned">
        <p>
            <span class="" id="t_note">You must reconfigure this page after rebooting the device. And you must also make sure that the WAN connection you want to use is connected before you configure the tunnel.</span>
        </p>

        <div>
            <b id="t_tunnel">IPv6 Tunnel:</b>
            <input type="checkbox" id="tunnelen" />
            <label class="T_en">Enable</label>
        </div>

        <div id="con2">
            <b id="t_mech">Mechanism:</b>
            <select id="tunnel_mecha" class="xxl">
                <option value="0" class="" id="t_dslite">DS-Lite</option>
                <option value="1" class="" id="t_6rd">6RD</option>
                <option value="2" class="" id="t_6to4">6to4</option>
            </select>
        </div>

        <div id="wan6_select">
            <b class="T_wanconn">WAN Connection:</b>
            <select id="tunnel_wan6inf" class="xxl"></select>
        </div>

        <div id="wan_select">
            <b class="T_wanconn">WAN Connection:</b>
            <select id="tunnel_waninf" class="xxl"></select>
        </div>

        <div id="conf_type">
            <b id="t_conftype">Configuration Type:</b>
            <input name="t_tunnel_conf" type="radio" id="tunnel_auto" />
            <label class="T_auto">Auto</label>
            <input name="t_tunnel_conf" type="radio" id="tunnel_manual" />
            <label id="t_manual">Manual</label>
        </div>

        <div id="dslite_elem">
            <b id="t_remote">Remote IPv6 Address:</b>
            <input type="text" id="tunnel_raddr" />
        </div>

        <div id="6rd_elem" class="nd">
            <div>
                <b id="t_masklen">IPv4 Mask Length:</b>
                <input type="text" id="masklen" />
            </div>

            <div>
                <b id="t_6rdpfx">6RD Prefix:</b>
                <input type="text" id="pre" />
            </div>

            <div>
                <b id="t_6rdplen">6RD Prefix Length:</b>
                <input type="text" id="prelen" />
            </div>

            <div>
                <b id="t_braddr">Border Relay IPv4 Address:</b>
                <input type="text" id="relayaddr" />
            </div>
        </div>

        <div id="bSave">
            <button type="submit" class="green T_save" id="t_save">Save</button>
        </div>

    </form>
</div>

<script language="javascript" type="text/javascript">
$.tpInit(init);
</script>
