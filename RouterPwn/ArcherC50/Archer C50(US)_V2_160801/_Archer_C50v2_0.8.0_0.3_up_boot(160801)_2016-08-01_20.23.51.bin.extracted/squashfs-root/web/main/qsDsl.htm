<script type="text/javascript" language="javascript">
var adsls;
var vdsls;
var ips;
var ppps;
var wans;
var defaultHostname = "";
var gatewayStack = "";
var gatewayType = "";
var portMappingList = {};
var portTriggerList = {};
var dslStack = "";
var bIptvAvailable = true;
var bVoipAvailable = true;
var bDelGateway = false;
var voipVoiceService = {};

function getVoiceInfo() {
    var voiceServiceList = $.act(ACT_GL, VOICE, null, null, ["X_TP_BoundIfName"]);
    if (!$.exe()) {
        voipVoiceService = voiceServiceList[0];
    }
    return ;
}
function getGatewayInfo() {
    var l3f = {};
    var conns = [];
    var i = 0;
    if (INCLUDE_WAN_VLAN) {
        ips = $.act(ACT_GL, WAN_IP_CONN, null, null, ["Name", "ConnectionType", "AddressingType", "ExternalIPAddress", "SubnetMask", "DefaultGateway", "DNSServers", "X_TP_8021QEnabled", "X_TP_VlanID"]);
        ppps = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["Name", "TransportType", "Username", "Password", "X_TP_8021QEnabled", "X_TP_VlanID"]);
    } else {
        ips = $.act(ACT_GL, WAN_IP_CONN, null, null, ["Name", "ConnectionType", "AddressingType", "ExternalIPAddress", "SubnetMask", "DefaultGateway", "DNSServers"]);
        ppps = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["Name", "TransportType", "Username", "Password"]);
    }
    wans = $.act(ACT_GL, WAN_COMMON_INTF_CFG, null, null, ["WANAccessType"]);

    adsls = $.act(ACT_GL, WAN_DSL_LINK_CFG, null, null, ["Enable", "AutoConfig", "DestinationAddress", "LinkType", "ATMEncapsulation"]);
    if (INCLUDE_VDSLWAN)
        vdsls = $.act(ACT_GL, WAN_PTM_LINK_CFG, null, null, ["Enable", "X_TP_Used", "X_TP_VID"]);

    if (!INCLUDE_WAN_MODE || $.qd.realMode == "DSL") {
        l3f = $.act(ACT_GET, L3_FORWARDING, null, null, ["__ifAliasName"]);
        if ($.exe()) return;
    } else if (INCLUDE_WAN_MODE && ($.qd.realMode == "ETH" || $.qd.realMode == "USB_3G")) {
        lastMode = $.act(ACT_GET, SYS_MODE, null, null, ["DSLL3ForwardingName"]);
        if ($.exe()) return;
        l3f.__ifAliasName = lastMode.DSLL3ForwardingName;
    }

    for (i = 0; i < ips.length; i++)
        conns.push(ips[i]);
    for (i = 0; i < ppps.length; i++)
        conns.push(ppps[i]);

    $.qd.conns = [];
    $.qd.adsl = {};
    $.qd.gw = undefined;
    if (INCLUDE_VDSLWAN) {
        $.qd.vdsl = {};
    }
    $.each(conns, function() {
        if ($.arr2obj(wans, "__stack")[$.stkPop(this.__stack, 2)].WANAccessType === "DSL") {
            $.qd.conns.push(this);
            if (this.name === l3f.__ifAliasName) {
                $.qd.gw = this;
                if (!this.connectionType || this.connectionType == "IP_Routed") {
                    gatewayStack = this.__stack;
                    if (!this.connectionType)
                        gatewayType = "ppp";
                    else
                        gatewayType = "ip";
                }
                if (INCLUDE_VDSLWAN)
                    isPTM = $.arr2obj(vdsls, "__stack")[$.stkPop(this.__stack)].X_TP_Used;
                if (INCLUDE_VDSLWAN && isPTM == 1) {
                    obj = $.arr2obj(vdsls, "__stack")[$.stkPop(this.__stack)];
                    $.qd.vdsl = {
                        type: "vdsl",
                        vid: obj.X_TP_VID,
                        wan: $.stkPop(this.__stack, 2)
                    };
                    if (this.connectionType == "IP_Routed") {
                        if (this.addressingType == "Static") {
                            dns = this.DNSServers.split(",");
                            $.qd.staip = {
                                ip: this.externalIPAddress,
                                mask: this.subnetMask,
                                gw: this.defaultGateway,
                                dns: dns[0],
                                dns2: dns[1]
                            };
                        }
                    } else if (this.transportType == "PPPoE") {
                        $.qd.ppp = {
                            usr: this.username,
                            pwd: this.password,
                            cfm: this.password
                        };
                    }
                    $.qd.gwInfo = {
                        vid: obj.X_TP_VID,
                        type: $.qd.type
                    };
                } else {
                    obj = $.arr2obj(adsls, "__stack")[$.stkPop(this.__stack)];
                    var pvcs = obj.destinationAddress.split(":")[1].split("/");
                    if (INCLUDE_WAN_VLAN)
                        $.qd.adsl = {
                            type: "adsl",
                            vpi: pvcs[0],
                            vci: pvcs[1],
                            auto: obj.autoConfig == 1 ? true : false,
                            wan: $.stkPop(this.__stack, 2),
                            tagEnabled: this.X_TP_8021QEnabled,
                            tag: this.X_TP_VlanID
                        };
                    else
                        $.qd.adsl = {
                            type: "adsl",
                            vpi: pvcs[0],
                            vci: pvcs[1],
                            auto: obj.autoConfig == 1 ? true : false,
                            wan: $.stkPop(this.__stack, 2)
                        };
                    if (obj.linkType == "EoA") {
                        if (this.connectionType == "IP_Routed") {
                            if (this.addressingType == "Static") {
                                gatewayType = "ip";
                                dns = this.DNSServers.split(",");
                                $.qd.staip = {
                                    ip: this.externalIPAddress,
                                    mask: this.subnetMask,
                                    gw: this.defaultGateway,
                                    dns: dns[0],
                                    dns2: dns[1]
                                };
                            } else if (this.addressingType == "DHCP") gatewayType = "ip";
                        } else if (this.transportType == "PPPoE") {
                            gatewayType = "ppp";
                            $.qd.ppp = {
                                usr: this.username,
                                pwd: this.password,
                                cfm: this.password
                            };
                        }
                    } else if (obj.linkType == "IPoA") {
                        gatewayType = "ipoa";
                        dns = this.DNSServers.split(",");
                        $.qd.ipoa = {
                            ip: this.externalIPAddress,
                            mask: this.subnetMask,
                            gw: this.defaultGateway,
                            dns: dns[0],
                            dns2: dns[1]
                        };
                    } else if (obj.linkType == "PPPoA") {
                        gatewayType = "pppoa";
                        $.qd.pppoa = {
                            usr: this.username,
                            pwd: this.password,
                            cfm: this.password
                        };
                    }

                    $.qd.gwInfo = {
                        vpi: pvcs[0],
                        vci: pvcs[1],
                        auto: obj.autoConfig == 1 ? true : false,
                        type: $.qd.type
                    };
                }
            }
        }
    });
    if (!$.qd.adsl.wan)
        $.each(wans, function() {
            if (this.WANAccessType === "DSL") $.qd.adsl.wan = this.__stack;
        });
    if (INCLUDE_VDSLWAN && !$.qd.vdsl.wan)
        $.each(wans, function() {
            if (this.WANAccessType === "DSL") $.qd.vdsl.wan = this.__stack;
        });

    $.each(wans, function() {
        if (this.WANAccessType == "DSL") {
            dslStack = this.__stack;
            return false;
        }
    });
}

function doEnableVid() {
    if ($("#envid").prop("data-checked"))
        $("#div_vid").removeClass("nd");
    else
        $("#div_vid").addClass("nd");
}

function doEnableVtag() {
    if ($("#envtag").prop("data-checked"))
        $("#div_vtag").removeClass("nd");
    else
        $("#div_vtag").addClass("nd");
}

function initDSLParams(bSuccess, vpi, vci, vid, vtag, connType) {
    if (INCLUDE_VDSLWAN && $.qd.dslType == "vdsl") {
        $("#div_vdsl").removeClass("nd");
        $("#div_adsl").addClass("nd");
        if (INCLUDE_WAN_VLAN)
            $("#div_adslTag").addClass("nd");
        if (vid === undefined || vid == 0) {
            $("#vid").val(1);
            $("#envid").prop("checked", "");
            $("#div_vid").addClass("nd");
        } else {
            $("#vid").val(vid);
            $("#envid").prop("checked", "checked");
            $("#div_vid").removeClass("nd");
        }

        $("#vdslConnectionType").find("option[value=" + connType + "]").attr("selected", true);
        if (bSuccess == true) {
            $("#envid").attr("disabled", true);
            $("#vid").attr("disabled", true);
            $("#vdslConnectionType").attr("disabled", true);
        }

        if ($.qd.dsl.isp != "Other") {
            $("#div_enVlan").addClass("nd");
            $("#div_vid").addClass("nd");
            $("#vdslConnectionType").attr("disabled", true);
        } else {
            $("#div_enVlan").removeClass("nd");
            doEnableVid();
        }
    } else {
        $("#div_vdsl").addClass("nd");
        $("#div_adsl").removeClass("nd");
        if (INCLUDE_WAN_VLAN)
            $("#div_adslTag").removeClass("nd");
        $("#adslConnectionType").find("option[value=" + connType + "]").attr("selected", true);
        if (bSuccess == true) {
            $("#vpi").val(vpi);
            $("#vpi").attr("disabled", true);
            $("#vci").val(vci);
            $("#vci").attr("disabled", true);
            $("#adslConnectionType").attr("disabled", true);
            if (INCLUDE_WAN_VLAN) {
                $("#envtag").attr("disabled", true);
                $("#vtag").val(vtag);
                $("#vtag").attr("disabled", true);
            }
        } else {
            $("#vpi").val(vpi);
            $("#vpi").attr("disabled", false);
            $("#vci").val(vci);
            $("#vci").attr("disabled", false);
            if (INCLUDE_WAN_VLAN) {
                if (vtag === undefined || vtag == 0) {
                    $("#vtag").val(7);
                    $("#envtag").prop("checked", "");
                    $("#div_vtag").addClass("nd");
                } else {
                    $("#vtag").val(vtag);
                    $("#envtag").prop("checked", "checked");
                    $("#div_vtag").removeClass("nd");
                }
            }
        }
        if ($.qd.dsl.isp != "Other") {
            $("#div_vpi").addClass("nd");
            $("#div_vci").addClass("nd");
            if (INCLUDE_WAN_VLAN)
                $("#div_adslTag").addClass("nd");
            $("#adslConnectionType").attr("disabled", true);
        } else {
            $("#div_vpi").removeClass("nd");
            $("#div_vci").removeClass("nd");
            if (INCLUDE_WAN_VLAN)
                $("#div_adslTag").removeClass("nd");
        }
    }
}

function collectDslParams() {
    if (INCLUDE_VDSLWAN && $.qd.dsl.isp == "Other") {
        if ($("#vdsl_radio").prop("checked") == true)
            $.qd.dslType = "vdsl";
        else
            $.qd.dslType = "adsl";
    }
    if (INCLUDE_VDSLWAN && $.qd.dslType == "vdsl") {
        $.qd.dsl.vid = 0;
        if ($("#envid").prop("data-checked"))
            $.qd.dsl.vid = $("#vid").val();
    } else {
        $.qd.dslType = "adsl";
        $.qd.dsl.vpi = $("#vpi").val();
        $.qd.dsl.vci = $("#vci").val();
        if (INCLUDE_WAN_VLAN) {
            $.qd.dsl.vtag = 0;
            if (!$("#div_adslTag").hasClass("nd") && $("#envtag").prop("data-checked"))
                $.qd.dsl.vtag = $("#vtag").val();
        }
    }
}

function doDslTypeChange(type) {
    var connType = "";

    if (type == "vdsl") {
        $("#div_adsl").addClass("nd");
        $("#div_vdsl").removeClass("nd");
        connType = $("#vdslConnectionType").data("value");
    } else {
        $("#div_adsl").removeClass("nd");
        $("#div_vdsl").addClass("nd");
        connType = $("#adslConnectionType").data("value");
    }
    if (!connType)
        connType = "ppp";
    if ($.qd.dsl.isp == "Other") {
        if (INCLUDE_WAN_VLAN) {
            if (connType.search("oa") != -1)
                $("#div_adslTag").addClass("nd");
            else
                $("#div_adslTag").removeClass("nd");
        }
    }
    showConnType(connType);
}

function initPPPoEAttrs() {
	var bShowAdslTag = false;
	
    if (!$.qd.ppp) $.qd.ppp = {};
    if ($.qd.ppp.usr)
        $("#ppp_username").val($.qd.ppp.usr);
    if ($.qd.ppp.pwd) {
        $("#ppp_password").val($.qd.ppp.pwd);
        $("#ppp_cfmpassword").val($.qd.ppp.pwd);
    }
	
	if (INCLUDE_WAN_VLAN) {
		if ($.qd.dsl.isp == "Other") {
			if (!INCLUDE_VDSLWAN || (INCLUDE_VDSLWAN && $("#adsl_radio").prop("checked") == true))
				bShowAdslTag = true;
		}
		else {
			if ($.qd.dsl.vtag) {
				bShowAdslTag = true;
				$("#envtag").prop("checked", true).data("tpCheckbox").refresh();
				$("#envtag").prop("disabled", true).data("tpCheckbox").refresh();
				$("#div_vtag").removeClass("nd");
				$("#vtag").val($.qd.dsl.vtag);
				$("#vtag").prop("disabled", true)
			}
		}
	}	
	if (bShowAdslTag)
		$("#div_adslTag").removeClass("nd");
}

function addPPPoEAttrs() {
    $.qd.ppp.usr = $("#ppp_username").val();
    $.qd.ppp.pwd = $("#ppp_password").val();
    $.qd.ppp.cfm = $("#ppp_cfmpassword").val();
}

function chkPPPoEAttrs() {
    if ($.qd.ppp.usr == "") {
        $.alert(ERR_USERNAME_INVAD);
        $("#ppp_username").focus();
        $("#ppp_username").select();
        return false
    }
    if ($.qd.ppp.pwd !== $.qd.ppp.cfm) {
        $.alert(ERR_PWD_INVAD);
        $("#ppp_password").focus();
        $("#ppp_password").select();
        return false;
    }
}

function initPPPoAAttrs() {
    if (!$.qd.pppoa) $.qd.pppoa = {};
    if ($.qd.pppoa.usr) {
        $("#pppoa_username").val($.qd.pppoa.usr);
    }
    if ($.qd.pppoa.pwd) {
        $("#pppoa_password").val($.qd.pppoa.pwd);
        $("#pppoa_cfmpassword").val($.qd.pppoa.pwd);
    }
	if (INCLUDE_WAN_VLAN)
		$("#div_adslTag").addClass("nd");
}

function addPPPoAAttrs() {
    $.qd.pppoa.usr = $("#pppoa_username").val();
    $.qd.pppoa.pwd = $("#pppoa_password").val();
    $.qd.pppoa.cfm = $("#pppoa_cfmpassword").val();
}

function chkPPPoAAttrs() {
    if ($.qd.pppoa.usr == "") {
        $.alert(ERR_USERNAME_INVAD);
        $("#pppoa_username").focus();
        $("#pppoa_username").select();
        return false;
    }
    if ($.qd.pppoa.pwd !== $.qd.pppoa.cfm) {
        $.alert(ERR_PWD_INVAD);
        $("#pppoa_password").focus();
        $("#pppoa_password").select();
        return false;
    }
}

function initStaticIpAttrs() {
	var bShowAdslTag = false;
	
    if (!$.qd.staip) $.qd.staip = {};
    if ($.qd.staip.ip)
        $("#staip").val($.qd.staip.ip);
    if ($.qd.staip.mask)
        $("#staipmask").val($.qd.staip.mask);
    if ($.qd.staip.gw)
        $("#staipgw").val($.qd.staip.gw);
    if ($.qd.staip.dns)
        $("#staipdns1").val($.qd.staip.dns);
    if ($.qd.staip.dns2)
        $("#staipdns2").val($.qd.staip.dns2);
		
	if (INCLUDE_WAN_VLAN) {
		if ($.qd.dsl.isp == "Other") {
			if (!INCLUDE_VDSLWAN || (INCLUDE_VDSLWAN && $("#adsl_radio").prop("checked") == true))
				bShowAdslTag = true;
		}
		else {
			if ($.qd.dsl.vtag) {
				bShowAdslTag = true;
				$("#envtag").prop("checked", true).data("tpCheckbox").refresh();
				$("#envtag").prop("disabled", true).data("tpCheckbox").refresh();
				$("#div_vtag").removeClass("nd");
				$("#vtag").val($.qd.dsl.vtag);
				$("#vtag").prop("disabled", true)
			}
		}
	}
	if (bShowAdslTag)
		$("#div_adslTag").removeClass("nd");
}

function addStaticIpAttrs() {
    $.qd.staip.ip = $("#staip").val();
    $.qd.staip.mask = $("#staipmask").val();
    $.qd.staip.gw = $("#staipgw").val();
    $.qd.staip.dns = $("#staipdns1").val();
    $.qd.staip.dns2 = $("#staipdns2").val();
}

function chkStaticIpAttrs() {
    if ($.ifip($.qd.staip.ip, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#staip").focus();
        $("#staip").select();
        return false;
    }
    if ($.mask($.qd.staip.mask, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#staipmask").focus();
        $("#staipmask").select();
        return false;
    }
    if ($.ipmask($.qd.staip.ip, $.qd.staip.mask, true)) {
        $.alert(ERR_IPMASK_HOST_INVAD);
        $("#staipmask").focus();
        $("#staipmask").select();
        return false;
    }
    if ($.ifip($.qd.staip.gw, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#staipgw").focus();
        $("#staipgw").select();
        return false;
    }
    if ($.ipmask($.qd.staip.gw, $.qd.staip.mask, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#staipgw").focus();
        $("#staipgw").select();
        return false;
    }
    if ($.ipmaskgw($.qd.staip.ip, $.qd.staip.mask, $.qd.staip.gw, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#staipgw").focus();
        $("#staipgw").select();
        return false;
    }
    if ($.qd.staip.dns && $.ip2num($.qd.staip.dns) !== 0 && $.ifip($.qd.staip.dns, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#staipdns1").focus();
        $("#staipdns1").select();
        return false;
    }
    if ($.qd.staip.dns2 && $.ip2num($.qd.staip.dns2) !== 0 && $.ifip($.qd.staip.dns2, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#staipdns2").focus();
        $("#staipdns2").select();
        return false;
    }
}

function initIPoAAttrs() {
    if (!$.qd.ipoa) $.qd.ipoa = {};
    if ($.qd.ipoa.ip)
        $("#ipoa").val($.qd.ipoa.ip);
    if ($.qd.ipoa.mask)
        $("#ipoamask").val($.qd.ipoa.mask);
    if ($.qd.ipoa.gw)
        $("#ipoagw").val($.qd.ipoa.gw);
    if ($.qd.ipoa.dns)
        $("#ipoadns1").val($.qd.ipoa.dns);
    if ($.qd.ipoa.dns2)
        $("#ipoadns2").val($.qd.ipoa.dns2);
	if (INCLUDE_WAN_VLAN)
		$("#div_adslTag").addClass("nd");
}

function addIPoAAttrs() {
    $.qd.ipoa.ip = $("#ipoa").val();
    $.qd.ipoa.mask = $("#ipoamask").val();
    $.qd.ipoa.gw = $("#ipoagw").val();
    $.qd.ipoa.dns = $("#ipoadns1").val();
    $.qd.ipoa.dns2 = $("#ipoadns2").val();
}

function chkIPoAAttrs() {
    if ($.ifip($.qd.ipoa.ip, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#ipoa").focus();
        $("#ipoa").select();
        return false;
    }
    if ($.mask($.qd.ipoa.mask, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#ipoamask").focus();
        $("#ipoamask").select();
        return false;
    }
    if ($.ipmask($.qd.ipoa.ip, $.qd.ipoa.mask, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#ipoa").focus();
        $("#ipoa").select();
        return false;
    }
    if ($.ifip($.qd.ipoa.gw, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#ipoagw").focus();
        $("#ipoagw").select();
        return false;
    }
    if ($.ipmask($.qd.ipoa.gw, $.qd.ipoa.mask, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#ipoa").focus();
        $("#ipoa").select();
        return false;
    }
    if ($.ipmaskgw($.qd.ipoa.ip, $.qd.ipoa.mask, $.qd.ipoa.gw, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#ipoa").focus();
        $("#ipoa").select();
        return false;
    }
    if ($.qd.ipoa.dns && $.ip2num($.qd.ipoa.dns) !== 0 && $.ifip($.qd.ipoa.dns, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#ipoadns1").focus();
        $("#ipoadns1").select();
        return false;
    }
    if ($.qd.ipoa.dns2 && $.ip2num($.qd.ipoa.dns2) !== 0 && $.ifip($.qd.ipoa.dns2, true)) {
        $.alert(ERR_STAIP_IP_INVAD);
        $("#ipoadns2").focus();
        $("#ipoadns2").select();
        return false;
    }
}

function initDynamicIPAttrs(){
	var bShowAdslTag = false;
	
	if (INCLUDE_WAN_VLAN) {
		if ($.qd.dsl.isp == "Other") {
			if (!INCLUDE_VDSLWAN || (INCLUDE_VDSLWAN && $("#adsl_radio").prop("checked") == true))
				bShowAdslTag = true;
		}
		else {
			if ($.qd.dsl.vtag) {
				bShowAdslTag = true;
				$("#envtag").prop("checked", true).data("tpCheckbox").refresh();
				$("#envtag").prop("disabled", true).data("tpCheckbox").refresh();
				$("#div_vtag").removeClass("nd");
				$("#vtag").val($.qd.dsl.vtag);
				$("#vtag").prop("disabled", true)
			}
		}
	}
	if (bShowAdslTag)
		$("#div_adslTag").removeClass("nd");
}

function initBridgeAttrs(){
	var bShowAdslTag = false;
	
	if (INCLUDE_WAN_VLAN) {
		if ($.qd.dsl.isp == "Other") {
			if (!INCLUDE_VDSLWAN || (INCLUDE_VDSLWAN && $("#adsl_radio").prop("checked") == true))
				bShowAdslTag = true;
		}
		else {
			if ($.qd.dsl.vtag) {
				bShowAdslTag = true;
				$("#envtag").prop("checked", true).data("tpCheckbox").refresh();
				$("#envtag").prop("disabled", true).data("tpCheckbox").refresh();
				$("#div_vtag").removeClass("nd");
				$("#vtag").val($.qd.dsl.vtag);
				$("#vtag").prop("disabled", true)
			}
		}
	}
	if (bShowAdslTag)
		$("#div_adslTag").removeClass("nd");
}

function setDefaultHostname() {
    var c;
    var ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.";
    var i = 0;
    var hostname = "";
    var hostnameLen = 0;

    for (i = 0; i < $.model.length; i++) {
        c = $.model.charAt(i);
        if (ch.indexOf(c) == -1) {
            if (hostnameLen == 0 || (hostnameLen > 0 && hostname.charAt(hostnameLen - 1) == "_")) {
                continue;
            } else {
                hostname += "_";
                hostnameLen++;
            }
        } else {
            hostname += c;
            hostnameLen++;
        }
    }

    defaultHostname = (hostnameLen > 0 && hostname.charAt(hostnameLen - 1) == "_") ? hostname.substr(0, hostnameLen - 1) : hostname;
}

function showConnType(type) {
    $("#div_connType").children().css("display", "none");
    $("#div_" + type).trigger("initAttrs");
    $("#div_" + type).fadeIn(200);
}

function initConnType() {
    var bDetectSucc = false;
    var vpi = ($.qd.dsl.vpi !== undefined) ? $.qd.dsl.vpi : "8";
    var vci = ($.qd.dsl.vci !== undefined) ? $.qd.dsl.vci : "35";
    var vid = ($.qd.dsl.vid !== undefined) ? $.qd.dsl.vid : "0";
    var vtag = ($.qd.dsl.vtag !== undefined) ? $.qd.dsl.vtag : "0";
    var connectionType = ($.qd.dsl.isp == "Other") ? (($.qd.type) ? $.qd.type : "ppp") : $.qd.type;

    initDSLParams(bDetectSucc, vpi, vci, vid, vtag, connectionType);
    showConnType(connectionType);
}

function doAddVoipConn(chkVoipRet, succHook) {
    var newVoipLinkCfg = "";
    var newVoipConnArgs = {
        name: "voip",
        enable: 1,
        transportType: $.qd.dsl.voip.connType,
        username: $.qd[$.qd.type].usr,
        password: $.qd[$.qd.type].pwd,
        X_TP_IfName: ""
    };
	var bAddVoipConnDev = false;
	var newVoipConnDev = {};
	
    if (INCLUDE_WAN_VLAN) {
        if ($.qd.dsl.voip.dslType == "adsl") {
            if ($.qd.dsl.voip.vtag != -1) {
                newVoipConnArgs.X_TP_8021QEnabled = 1;
                newVoipConnArgs.X_TP_VlanID = $.qd.dsl.voip.vtag;
                if ($.qd.dsl.voip.priority != -1)
                    newVoipConnArgs.X_TP_VlanPr = $.qd.dsl.voip.priority;
            } else
                newVoipConnArgs.X_TP_8021QEnabled = 0;
        } else if (INCLUDE_VDSLWAN && $.qd.dsl.voip.dslType == "vdsl") {
            if ($.qd.dsl.voip.vid != 0)
                if ($.qd.dsl.voip.priority != -1)
                    newVoipConnArgs.X_TP_VlanPr = $.qd.dsl.voip.priority;
        }
    }
    var addVoipConn = function(parentStack) {
        var newVoipConn = $.act(ACT_ADD, WAN_PPP_CONN, null, parentStack, newVoipConnArgs);
        $.exe(function(err) {
            if (err) {
				if (bAddVoipConnDev) {
					$.act(ACT_DEL, WAN_CONN_DEVICE, newVoipConnDev.__stack, null);
					$.exe();
				}
                $.alert(err);
                $.removeLoading();
                return;
            }
            ppps.push(newVoipConn);
            newVoipConn = $.act(ACT_GET, WAN_PPP_CONN, newVoipConn.__stack, null, ["X_TP_IfName"]);
            $.exe(function(err) {
                if (err) {
                    $.alert(err);
                    $.removeLoading();
                    return;
                }
                if ($.qd.dsl.voip.bindToInternet == true)
                    $.act(ACT_SET, VOICE, voipVoiceService.__stack, null, ["X_TP_BoundIfName=" + $.qd.newConn.ifName]);
                else
                    $.act(ACT_SET, VOICE, voipVoiceService.__stack, null, ["X_TP_BoundIfName=" + newVoipConn.X_TP_IfName]);
                $.exe(function(err) {
            if (succHook && (typeof succHook == "function"))
                succHook();
        });
            });
        });
    };
    var addVoipConnDevice = function() {
		bAddVoipConnDev = true;
        newVoipConnDev = $.act(ACT_ADD, WAN_CONN_DEVICE, null, dslStack);
        $.exe(function(err) {
            if (err) {
                $.alert(err);
                $.removeLoading();
                return;
            }
            if (newVoipLinkCfg == WAN_DSL_LINK_CFG)
                adsls.push({
                    enable: newVoipConnDevArgs.enable,
                    destinationAddress: newVoipConnDevArgs.destinationAddress,
                    linkType: newVoipConnDevArgs.linkType,
                    ATMEncapsulation: newVoipConnDevArgs.ATMEncapsulation,
                    __stack: newVoipConnDev.__stack
                });
            else if (INCLUDE_VDSLWAN && newVoipLinkCfg == WAN_PTM_LINK_CFG)
                vdsls.push({
                    enable: newVoipConnDevArgs.enable,
                    X_TP_Used: newVoipConnDevArgs.X_TP_Used,
                    X_TP_VlanEnabled: newVoipConnDevArgs.X_TP_VlanEnabled,
                    X_TP_VID: newVoipConnDevArgs.X_TP_VID,
                    __stack: newVoipConnDev.__stack
                });
            $.act(ACT_SET, newVoipLinkCfg, newVoipConnDev.__stack, null, newVoipConnDevArgs);
            addVoipConn(newVoipConnDev.__stack);
        });
    };
    if ($.qd.dsl.voip.dslType == "adsl") {
        pvcs = "PVC:" + $.qd.dsl.voip.vpi + "/" + $.qd.dsl.voip.vci;
        newVoipConnDevArgs = {
            enable: 1,
            destinationAddress: pvcs,
            linkType: $.qd.dsl.voip.connType == "PPPoA" && "PPPoA" || $.qd.dsl.voip.connType == "IPoA" && "IPoA" || "EoA",
            ATMEncapsulation: $.qd.dsl.voip.encapMode
        };
        if (INCLUDE_WAN_VLAN && $.qd.dsl.voip.vtag != -1) {
            newVoipConnArgs.X_TP_8021QEnabled = 1;
            newVoipConnArgs.X_TP_VlanID = $.qd.dsl.voip.vtag;
        }
        newVoipLinkCfg = WAN_DSL_LINK_CFG;
    } else {
        newVoipConnDevArgs = {
            enable: 1,
            X_TP_Used: 1,
            X_TP_VlanEnabled: ($.qd.dsl.voip.vid == 0) ? 0 : 1,
            X_TP_VID: $.qd.dsl.voip.vid
        };
        newVoipLinkCfg = WAN_PTM_LINK_CFG;
    }

    switch (chkVoipRet.step) {
        case 1:
            /* delete old voip connection and add new voip connection, need to know the connection device stack */
            $.each(ppps, function() {
                if (this.__stack == chkVoipRet.voipStk) {
                    ppps.pop(this);
                    return false;
                }
            });
            $.act(ACT_DEL, WAN_PPP_CONN, chkVoipRet.voipStk, null);
            addVoipConn(chkVoipRet.connDevStk);
            break;
        case 2:
            /* delete old voip connection, then add new connection device and new voip connection */
            $.each(ppps, function() {
                if (this.__stack == chkVoipRet.voipStk) {
                    ppps.pop(this);
                    return false;
                }
            });
            $.act(ACT_DEL, WAN_PPP_CONN, chkVoipRet.voipStk, null);
            addVoipConnDevice();
            break;
		case 3:
			/* delete old connection device and add new voip connection, this doesn't happen for now */
			break;
        case 4:
            /* delete old connection device and add new connection device and new voip connection */
            $.each(adsls, function() {
                if (this.__stack == chkVoipRet.connDevStk) {
                    adsls.pop(this);
                    return false;
                }
            });
            if (INCLUDE_VDSLWAN) {
                $.each(vdsls, function() {
                    if (this.__stack == chkVoipRet.connDevStk) {
                        vdsls.pop(this);
                        return false;
                    }
                });
			}
            $.act(ACT_DEL, WAN_CONN_DEVICE, chkVoipRet.connDevStk, null);
            addVoipConnDevice();
            break;
        case 5:
            /* delete old connection device and old voip connection, then add new connection device and new voip connection */
            $.each(ppps, function() {
                if (this.__stack == chkVoipRet.voipStk) {
                    ppps.pop(this);
                    return false;
                }
            });
            $.each(adsls, function() {
                if (this.__stack == $.stkPop(chkVoipRet.voipStk, 1)) {
                    adsls.pop(this);
                    return false;
                }
            });
            if (INCLUDE_VDSLWAN) {
                $.each(vdsls, function() {
                    if (this.__stack == $.stkPop(chkVoipRet.voipStk, 1)) {
                        vdsls.pop(this);
                        return false;
                    }
                });
            }
            $.act(ACT_DEL, WAN_PPP_CONN, chkVoipRet.voipStk, null);
            $.act(ACT_DEL, WAN_CONN_DEVICE, $.stkPop(chkVoipRet.voipStk, 1), null);
            addVoipConnDevice();
            break;
		case 6:
            /* delete old connection device and old voip connection, then add new voip connection */
            $.each(ppps, function() {
                if (this.__stack == chkVoipRet.voipStk) {
                    ppps.pop(this);
                    return false;
                }
            });
            $.each(adsls, function() {
                if (this.__stack == $.stkPop(chkVoipRet.voipStk, 1)) {
                    adsls.pop(this);
                    return false;
                }
            });
            if (INCLUDE_VDSLWAN) {
                $.each(vdsls, function() {
                    if (this.__stack == $.stkPop(chkVoipRet.voipStk, 1)) {
                        vdsls.pop(this);
                        return false;
                    }
                });
			}
            $.act(ACT_DEL, WAN_PPP_CONN, chkVoipRet.voipStk, null);
            $.act(ACT_DEL, WAN_CONN_DEVICE, $.stkPop(chkVoipRet.voipStk, 1), null);
            addVoipConn(chkVoipRet.connDevStk);
            break;
        case 7:
            /* add new voip connection, need to know the connection device stack */
            addVoipConn(chkVoipRet.connDevStk);
            break;
        case 8:
            /* add connection device and voip connection */
            addVoipConnDevice();
            break;
        case 9:
			/* delete the old connection device and old voip connection and the confilicted connection device, then add new connection device and new voip connection */
			$.each(ppps, function() {
				if (this.__stack == chkVoipRet.voipStk) {
					ppps.pop(this);
					return false;
				}
			});
			$.each(adsls, function() {
                if (this.__stack == $.stkPop(chkVoipRet.voipStk, 1) || this.__stack == chkVoipRet.connDevStk)
                    adsls.pop(this);
            });
            if (INCLUDE_VDSLWAN) {
                $.each(vdsls, function() {
                    if (this.__stack == $.stkPop(chkVoipRet.voipStk, 1) || this.__stack == chkVoipRet.connDevStk)
                        vdsls.pop(this);
                });
			}
			$.act(ACT_DEL, WAN_PPP_CONN, chkVoipRet.voipStk, null);
            $.act(ACT_DEL, WAN_CONN_DEVICE, $.stkPop(chkVoipRet.voipStk, 1), null);
			$.act(ACT_DEL, WAN_CONN_DEVICE, chkVoipRet.connDevStk, null);
            addVoipConnDevice();
			break;
		case 10:
			/* delete the old voip connection and the confilicted connection device, then add new connection device and new voip connection, this is similar to case 5 */
			$.each(ppps, function() {
                if (this.__stack == chkVoipRet.voipStk) {
                    ppps.pop(this);
                    return false;
                }
            });
            $.each(adsls, function() {
                if (this.__stack == chkVoipRet.connDevStk) {
                    adsls.pop(this);
                    return false;
                }
            });
            if (INCLUDE_VDSLWAN) {
                $.each(vdsls, function() {
                     if (this.__stack == chkVoipRet.connDevStk) {
                        vdsls.pop(this);
                        return false;
                    }
                });
            }
            $.act(ACT_DEL, WAN_PPP_CONN, chkVoipRet.voipStk, null);
            $.act(ACT_DEL, WAN_CONN_DEVICE, chkVoipRet.connDevStk, null);
            addVoipConnDevice();
        default:
            break;
    }
}

function doAddIptvConn(chkIptvRet) {
    var newIptvLinkCfg = "";
	var bAddIptvConnDev = false;
	var newIptvConnDev = {};
    var newIptvConnArgs = {
        name: "iptv",
        enable: 1,
        connectionType: "IP_Routed",
        addressingType: "DHCP",
        NATEnabled: 1,
        X_TP_Hostname: defaultHostname,
        X_TP_IfName: ""
    };
    var addIptvConn = function(parentStack) {
        $.act(ACT_ADD, WAN_IP_CONN, null, parentStack, newIptvConnArgs);
        $.exe(function(err) {
            if (err) {
				if (bAddIptvConnDev) {
					$.act(ACT_DEL, WAN_CONN_DEVICE, newIptvConnDev.__stack);
					$.exe();
				}
                $.alert(err);
                $.removeLoading();
                return;
            }
            $.removeLoading();
            if ($.qd.internetDiag == 1)
                loadSubPage("qsDiag.htm");
            else
                $.qf.next();
        });
    };
    var addIptvConnDevice = function() {
		bAddIptvConnDev = true;
        newIptvConnDev = $.act(ACT_ADD, WAN_CONN_DEVICE, null, dslStack);
        $.exe(function(err) {
            if (err) {
                $.alert(err);
                $.removeLoading();
                return;
            }
            $.act(ACT_SET, newIptvLinkCfg, newIptvConnDev.__stack, null, newIptvConnDevArgs);
            addIptvConn(newIptvConnDev.__stack);
        });
    };
    if ($.qd.dsl.iptv.dslType == "adsl") {
        pvcs = "PVC:" + $.qd.dsl.iptv.vpi + "/" + $.qd.dsl.iptv.vci;
        newIptvConnDevArgs = {
            enable: 1,
            destinationAddress: pvcs,
            LinkType: $.qd.dsl.iptv.connType == "pppoa" && "PPPoA" || $.qd.dsl.iptv.connType == "ipoa" && "IPoA" || "EoA",
            ATMEncapsulation: $.qd.dsl.iptv.encapMode
        };
        if (INCLUDE_WAN_VLAN && $.qd.dsl.iptv.vtag != -1) {
            newIptvConnArgs.X_TP_8021QEnabled = 1;
            newIptvConnArgs.X_TP_VlanID = $.qd.dsl.iptv.vtag;
        }
        newIptvLinkCfg = WAN_DSL_LINK_CFG;
    } else {
        newIptvConnDevArgs = {
            enable: 1,
            X_TP_Used: 1,
            X_TP_VlanEnabled: ($.qd.dsl.iptv.vid == 0) ? 0 : 1,
            X_TP_VID: $.qd.dsl.iptv.vid
        };
        newIptvLinkCfg = WAN_PTM_LINK_CFG;
    }

    switch (chkIptvRet.step) {
        case 1:
            /* delete old iptv connection and add new iptv connection, need to know the connection device stack */
            $.each(ips, function() {
                if (this.__stack == chkIptvRet.iptvStk) {
                    ips.pop(this);
                    return false;
                }
            });
            $.act(ACT_DEL, WAN_IP_CONN, chkIptvRet.iptvStk, null);
            addIptvConn(chkIptvRet.connDevStk);
            break;
        case 2:
            /* delete old iptv connection, then add new connection device and new iptv connection */
            $.each(ips, function() {
                if (this.__stack == chkIptvRet.iptvStk) {
                    ips.pop(this);
                    return false;
                }
            });
            $.act(ACT_DEL, WAN_IP_CONN, chkIptvRet.iptvStk, null);
            addIptvConnDevice();
            break;
		case 3:
			/* delete old connection device and add new iptv connection, this doesn't happen for now */
			break;
        case 4:
            /* delete old connection device and add new connection device and new iptv connection */
            $.each(adsls, function() {
                if (this.__stack == chkIptvRet.connDevStk) {
                    adsls.pop(this);
                    return false;
                }
            });
            if (INCLUDE_VDSLWAN)
                $.each(vdsls, function() {
                    if (this.__stack == chkIptvRet.connDevStk) {
                        vdsls.pop(this);
                        return false;
                    }
                });
            $.act(ACT_DEL, WAN_CONN_DEVICE, chkIptvRet.connDevStk, null);
            addIptvConnDevice();
            break;
        case 5:
            /* delete old connection device and old iptv connection, then add new connection device and new iptv connection */
            $.each(ips, function() {
                if (this.__stack == chkIptvRet.iptvStk) {
                    ips.pop(this);
                    return false;
                }
            });
            $.each(adsls, function() {
                if (this.__stack == $.stkPop(chkIptvRet.iptvStk, 1)) {
                    adsls.pop(this);
                    return false;
                }
            });
            if (INCLUDE_VDSLWAN) {
                $.each(vdsls, function() {
                    if (this.__stack == $.stkPop(chkIptvRet.iptvStk, 1)) {
                        vdsls.pop(this);
                        return false;
                    }
                });
            }
            $.act(ACT_DEL, WAN_IP_CONN, chkIptvRet.iptvStk, null);
            $.act(ACT_DEL, WAN_CONN_DEVICE, $.stkPop(chkIptvRet.iptvStk, 1), null);
            addIptvConnDevice();
            break;
		case 6:
            /* delete old connection device and old iptv connection, then add new iptv connection */
            $.each(ips, function() {
                if (this.__stack == chkIptvRet.iptvStk) {
                    ips.pop(this);
                    return false;
                }
            });
            $.each(adsls, function() {
                if (this.__stack == $.stkPop(chkIptvRet.iptvStk, 1)) {
                    adsls.pop(this);
                    return false;
                }
            });
            if (INCLUDE_VDSLWAN)
                $.each(vdsls, function() {
                    if (this.__stack == $.stkPop(chkIptvRet.iptvStk, 1)) {
                        vdsls.pop(this);
                        return false;
                    }
                });
            $.act(ACT_DEL, WAN_IP_CONN, chkIptvRet.iptvStk, null);
            $.act(ACT_DEL, WAN_CONN_DEVICE, $.stkPop(chkIptvRet.iptvStk), null);
            addIptvConn(chkIptvRet.connDevStk);
            break;
        case 7:
            /* add new iptv connection, need to know the connection device stack */
            addIptvConn(chkIptvRet.connDevStk);
            break;
        case 8:
            /* add connection device and iptv connection */
            addIptvConnDevice();
            break;
        case 9:
			/* delete the old connection device and old iptv connection and the confilicted connection device, then add new connection device and new iptv connection */
			$.each(ips, function() {
				if (this.__stack == chkIptvRet.iptvStk) {
					ips.pop(this);
					return false;
				}
			});
			$.each(adsls, function() {
                if (this.__stack == $.stkPop(chkIptvRet.iptvStk, 1) || this.__stack == chkIptvRet.connDevStk)
                    adsls.pop(this);
            });
            if (INCLUDE_VDSLWAN)
                $.each(vdsls, function() {
                    if (this.__stack == $.stkPop(chkIptvRet.iptvStk, 1) || this.__stack == chkIptvRet.connDevStk)
                        vdsls.pop(this);
                });
			$.act(ACT_DEL, WAN_IP_CONN, chkIptvRet.iptvStk, null);
            $.act(ACT_DEL, WAN_CONN_DEVICE, $.stkPop(chkIptvRet.iptvStk, 1), null);
			$.act(ACT_DEL, WAN_CONN_DEVICE, chkIptvRet.connDevStk, null);
            addIptvConnDevice();
			break;
		case 10:
			/* delete the old iptv connection and the confilicted connection device, then add new connection device and new iptv connection, this is similar to case 5 */
			$.each(ips, function() {
                if (this.__stack == chkIptvRet.iptvStk) {
                    ips.pop(this);
                    return false;
                }
            });
            $.each(adsls, function() {
                if (this.__stack == chkIptvRet.connDevStk) {
                    adsls.pop(this);
                    return false;
                }
            });
            if (INCLUDE_VDSLWAN) {
                $.each(vdsls, function() {
                     if (this.__stack == chkIptvRet.connDevStk) {
                        vdsls.pop(this);
                        return false;
                    }
                });
            }
            $.act(ACT_DEL, WAN_IP_CONN, chkIptvRet.iptvStk, null);
            $.act(ACT_DEL, WAN_CONN_DEVICE, chkIptvRet.connDevStk, null);
            addIptvConnDevice();
        default:
            break;
    }
}

function doAddConnection() {
    var instance = {};
    var newConnection = {};
    var i;
    var bDslModeChanged = false;
    var dslIntfCfg = {};
    var iptvHandler = "";
	var bAddConnDev = false;
	var pStack = "";
    var pppArgs = ($.qd.type == "ppp" || $.qd.type == "pppoa") ? {
        name: "",
        enable: 1,
        transportType: $.qd.type == "ppp" ? "PPPoE" : "PPPoA",
        username: $.qd[$.qd.type].usr,
        password: $.qd[$.qd.type].pwd,
        X_TP_IfName: ""
    } : {};
    var dhcpArgs = {
        name: "",
        enable: 1,
        connectionType: "IP_Routed",
        addressingType: "DHCP",
        NATEnabled: 1,
        X_TP_Hostname: defaultHostname,
        X_TP_IfName: ""
    };
    var staipArgs = ($.qd.type == "staip" || $.qd.type == "ipoa") ? {
        name: "",
        X_TP_IfName: "",
        enable: 1,
        connectionType: "IP_Routed",
        addressingType: "Static",
        NATEnabled: 1,
        externalIPAddress: $.qd[$.qd.type].ip,
        subnetMask: $.qd[$.qd.type].mask,
        defaultGateway: $.qd[$.qd.type].gw,
        DNSOverrideAllowed: 1,
        DNSServers: $.qd[$.qd.type].dns + "," + $.qd[$.qd.type].dns2
    } : {};
    var brArgs = {
        enable: 1,
        connectionType: "IP_Bridged"
    };

    if (INCLUDE_WAN_VLAN) {
        pppArgs.X_TP_8021QEnabled = $.qd.dsl.vtag ? 1 : 0;
        pppArgs.X_TP_VlanID = $.qd.dsl.vtag ? $.qd.dsl.vtag : 0;

        dhcpArgs.X_TP_8021QEnabled = $.qd.dsl.vtag ? 1 : 0;
        dhcpArgs.X_TP_VlanID = $.qd.dsl.vtag ? $.qd.dsl.vtag : 0;

        staipArgs.X_TP_8021QEnabled = $.qd.dsl.vtag ? 1 : 0;
        staipArgs.X_TP_VlanID = $.qd.dsl.vtag ? $.qd.dsl.vtag : 0;

        brArgs.X_TP_8021QEnabled = $.qd.dsl.vtag ? 1 : 0;
        brArgs.X_TP_VlanID = $.qd.dsl.vtag ? $.qd.dsl.vtag : 0;
    }
    var doAdd = function(stack) {
        if ($.qd.type == "ppp" || $.qd.type == "pppoa")
            newConnection = $.act(ACT_ADD, WAN_PPP_CONN, null, stack, pppArgs);
        else if ($.qd.type == "dhcp")
            newConnection = $.act(ACT_ADD, WAN_IP_CONN, null, stack, dhcpArgs);
        else if ($.qd.type == "staip" || $.qd.type == "ipoa")
            newConnection = $.act(ACT_ADD, WAN_IP_CONN, null, stack, staipArgs);
        else if ($.qd.type == "br")
            newConnection = $.act(ACT_ADD, WAN_IP_CONN, null, stack, brArgs);

        $.exe(function(err) {
            if (err) {
				if (bAddConnDev) {
					instance = $.act(ACT_DEL, WAN_CONN_DEVICE, pStack);
					$.exe();
				}
				getGatewayInfo();
                $.removeLoading();
                $.alert(err);
                return;
            }
            $.qd.newConn = {
                stack: newConnection.__stack,
                ifName: newConnection.X_TP_IfName
            };
            if ($.qd.type != "br") {
                $.act(ACT_SET, L3_FORWARDING, null, null, {
                    __ifAliasName: newConnection.name,
                    __ifName: "",
                    defaultConnectionService: ""
                });
                for (i = 0; i < portMappingList.length; i++)
                    $.act(ACT_ADD, ($.qd.type.search("ppp") != -1) ? WAN_PPP_CONN_PORTMAPPING : WAN_IP_CONN_PORTMAPPING, null, newConnection.__stack, portMappingList[i]);
                for (i = 0; i < portTriggerList.length; i++)
                    $.act(ACT_ADD, ($.qd.type.search("ppp") != -1) ? PPP_CONN_PORTTRIGGERING : IP_CONN_PORTTRIGGERING, null, newConnection.__stack, portTriggerList[i]);
            }
            ips = $.act(ACT_GS, WAN_IP_CONN, null, dslStack, ["Name", "ConnectionType", "AddressingType", "ExternalIPAddress", "SubnetMask", "DefaultGateway", "DNSServers"]);
            ppps = $.act(ACT_GS, WAN_PPP_CONN, null, dslStack, ["Name", "TransportType", "Username", "Password"]);

            adsls = $.act(ACT_GS, WAN_DSL_LINK_CFG, null, dslStack, ["Enable", "AutoConfig", "DestinationAddress", "LinkType", "ATMEncapsulation"]);
            if (INCLUDE_VDSLWAN) {
                vdsls = $.act(ACT_GS, WAN_PTM_LINK_CFG, null, dslStack, ["Enable", "X_TP_Used", "X_TP_VID"]);
                if (bDslModeChanged == true) {
                    $.act(ACT_SET, WAN_DSL_INTF_CFG, dslStack, null, dslIntfCfg);
                }
            }
            iptvHandler = function() {
                chkIptvRet = chkIptvAvailable();
                if (bIptvAvailable == true)
                    doAddIptvConn(chkIptvRet);
                else {
                    $.removeLoading();
                    if ($.qd.internetDiag == 1) {
                        loadSubPage("qsDiag.htm");
                    } else {
                        $.qf.next();
                    }
                }
            };
            $.exe(function(err) {
                if (err) {
                    $.removeLoading();
                    $.alert(err);
                    return;
                }

                if ($.qd.internetDiag == 2) {
                    if (INCLUDE_VOIP && $.qd.dsl.voip && $.qd.dsl.voip.connType == "PPPoE") {
                        var specVoipConn;
                        $.each(ppps, function() {
                            if ("voip_" + $.qd.dsl.isp == this.name) {
                                specVoipConn = this;
                                return false;
                            }
                        });
                        $.act(ACT_SET, WAN_PPP_CONN, specVoipConn.__stack, null, ["Username=" + $.qd[$.qd.type].usr, "Password=" + $.qd[$.qd.type].pwd]);
                        $.exe(function(err) {
                            $.removeLoading();
                            if (err) {
                                $.alert(err);
                            } else {
                                loadSubPage("qsDiag.htm");
                            }
                            return;
                        });
                    } else {
                        $.removeLoading();
                        loadSubPage("qsDiag.htm");
                        return;
                    }
                }

                if (INCLUDE_VOIP && $.qd.dsl.voip) {
                    chkVoipRet = chkVoipAvailable();
                    if (bVoipAvailable == true)
                        doAddVoipConn(chkVoipRet, iptvHandler);
                    else {
                        $.alert(errno);
                        return;
                    }
                } else
                    iptvHandler();

            });
        });
    };
    setDefaultHostname();

    if (INCLUDE_VDSLWAN && currDslMode != $.qd.dslType) {
        bDslModeChanged = true;
        dslIntfCfg.enable = 1;
        if ($.qd.dslType == "adsl") {
            dslIntfCfg.X_TP_AdslModulationCfg = "Multimode";
            dslIntfCfg.X_TP_AnnexType = "Annex B/J";
        } else if ($.qd.dslType == "vdsl") {
            dslIntfCfg.X_TP_AdslModulationCfg = "VDSL2";
            dslIntfCfg.X_TP_AnnexType = "Annex B";
        }
    }

        if (INCLUDE_VDSLWAN && $.qd.dslType == "vdsl" && $.qd.vlan) {
            pStack = $.qd.vlan.__stack;
        } else if ((!INCLUDE_VDSLWAN || (INCLUDE_VDSLWAN && $.qd.dslType == "adsl")) && $.qd.vc) {
            pStack = $.qd.vc.__stack;
        }

    if (pStack == "") {
		bAddConnDev = true;
        if (INCLUDE_VDSLWAN && $.qd.dslType == "vdsl")
            instance = $.act(ACT_ADD, WAN_CONN_DEVICE, null, $.qd.vdsl.wan);
        else
            instance = $.act(ACT_ADD, WAN_CONN_DEVICE, null, $.qd.adsl.wan);
        $.exe(function(err) {
            if (err) {
                $.removeLoading();
                $.alert(err);
                return;
            }
            pStack = instance.__stack;
            if ($.qd.dslType == "adsl") {
                $.act(ACT_SET, WAN_DSL_LINK_CFG, pStack, null, {
                    enable: 1,
                    destinationAddress: "PVC:" + $.qd.dsl.vpi + "/" + $.qd.dsl.vci,
                    LinkType: $.qd.type == "pppoa" && "PPPoA" || $.qd.type == "ipoa" && "IPoA" || "EoA",
                    ATMEncapsulation: $.qd.dsl.ATM
                });
            } else if (INCLUDE_VDSLWAN && $.qd.dslType == "vdsl") {
                $.act(ACT_SET, WAN_PTM_LINK_CFG, pStack, null, {
                    enable: 1,
                    X_TP_Used: 1,
                    X_TP_VlanEnabled: ($.qd.dsl.vid == 0) ? 0 : 1,
                    X_TP_VID: $.qd.dsl.vid
                });
            }
            doAdd(pStack);
        });
    } else {
		bAddConnDev = false;
        doAdd(pStack);
}
}

function goNext() {
    var ret = false;
    var newStack = "";
    var bFound = false;

    collectDslParams();
    if (INCLUDE_VDSLWAN && $.qd.dslType == "vdsl") {
        if ($.qd.dsl.vid != 0) {
            if ($.num($.qd.dsl.vid, [1, 4094], true)) {
                $("#vid").focus();
                $("#vid").select();
                return $.alert(CMM_WAN_INVALID_VID);
            }
        }
		$.qd.vlan = undefined;
        $(vdsls).each(function() {
            if (($.stkPop(this.__stack) == dslStack) && ($.qd.dsl.vid == this.X_TP_VID)) {
                $.qd.vlan = this;
                return false;
            }
        });
    } else {
        if ($.num($.qd.dsl.vpi, [0, 255], true)) {
            $("#vpi").focus();
            $("#vpi").select();
            return $.alert(ERR_WAN_VPI_VCI_INVAD);
        }
        if ($.num($.qd.dsl.vci, [1, 65535], true)) {
            $("#vci").focus();
            $("#vci").select();
            return $.alert(ERR_WAN_VPI_VCI_INVAD);
        }
        if (INCLUDE_WAN_VLAN && $.qd.dsl.vtag != 0 && $.num($.qd.dsl.vtag, [1, 4094], true)) {
            $("#vtag").select();
            return $.alert(ERR_WAN_VLAN_ID_INVALID);
        }
		$.qd.vc = undefined;
        pvc = "PVC:" + parseInt($.qd.dsl.vpi, 10) + "/" + parseInt($.qd.dsl.vci, 10);
        $(adsls).each(function() {
            if (this.destinationAddress === pvc) {
                $.qd.vc = this;
            }
        });
    }
    connType = $("#" + $.qd.dslType + "ConnectionType").data("value");
    $.qd.type = connType;
    $("#div_" + connType).triggerHandler("addAttrs");
    if ($("#div_" + connType).triggerHandler("chkValidation") == false)
        return;

    if ($.qd.dsl.isp == "Other" && $.qd.dslType == "adsl") {
        if ($.qd.type == "pppoa") {
            $.qd.dsl.ATM = "VCMUX";
        } else {
            $.qd.dsl.ATM = "LLC";
        }
    }

    if (!INCLUDE_WAN_MODE || $.qd.sysMode == "DSL") {
        $.qd.del = [];
        if (bDelGateway == false && $.qd.gw) $.qd.del.push({
            stack: $.qd.gw.__stack,
            type: $.qd.gw.transportType ? "ppp" : "ip",
            name: $.qd.gw.name
        });
        if (INCLUDE_VDSLWAN && $.qd.dslType == "vdsl" && $.qd.vlan) {
            $($.qd.conns).each(function() {
                if ($.stkPop(this.__stack) == $.qd.vlan.__stack && (!$.qd.gw || this.name != $.qd.gw.name))
                    $.qd.del.push({
                        stack: this.__stack,
                        type: this.transportType ? "ppp" : "ip",
                        name: this.name
                    });
            });
        } else if ((!INCLUDE_VDSLWAN || $.qd.dslType == "adsl") && $.qd.vc && ($.qd.vc.linkType == "IPoA" || $.qd.vc.linkType == "PPPoA" || $.qd.type == "ipoa" || $.qd.type == "pppoa" || $.qd.dsl.ATM != $.qd.vc.ATMEncapsulation)) {
            $($.qd.conns).each(function() {
                if ($.stkPop(this.__stack) == $.qd.vc.__stack && (!$.qd.gw || this.name != $.qd.gw.name))
                    $.qd.del.push({
                        stack: this.__stack,
                        type: this.transportType ? "ppp" : "ip",
                        name: this.name
                    });
            });
        } else if (!$.qd.gw && $.qd.conns.length >= 8) {
            var gotbr = 0;
            $($.qd.conns).each(function() {
                if (this.connectionType == "IP_Bridged") {
                    if (!gotbr) {
                        gotbr = 1;
                        $.qd.del[0] = {
                            stack: this.__stack,
                            type: this.transportType ? "ppp" : "ip",
                            name: this.name
                        };
                    } else if (this.__stack > $.qd.del[0].__stack)
                        $.qd.del[0] = {
                            stack: this.__stack,
                            type: this.transportType ? "ppp" : "ip",
                            name: this.name
                        };
                } else if (gotbr) {
                    $.removeLoading();
                    return;
                }
                $.qd.del[0] = {
                    stack: this.__stack,
                    type: this.transportType ? "ppp" : "ip",
                    name: this.name
                };
            });
        }
    }
    $.addLoading($("#next"));
    if ($.qd.del && $.qd.del.length) {
        var stacks = [];
        var pvcs = [];
        while (instance = $.qd.del.shift()) {
            stack = $.stkPop(instance.stack);
            $.act(ACT_DEL, instance.type == "ppp" ? WAN_PPP_CONN : WAN_IP_CONN, instance.stack);
            if (!$.inArray(stack, stacks))
                    stacks.push(stack);
        }
        while (stack = stacks.shift()) pvcs.push($.act(ACT_GET, WAN_CONN_DEVICE, stack));
        $.exe(function(err) {
            if (err) {
                $.removeLoading();
                $.alert(err);
                return;
            }
			bDelGateway = true;
            while (instance = pvcs.shift()) {
                if (instance.WANIPConnectionNumberOfEntries == 0 && instance.WANPPPConnectionNumberOfEntries == 0) {
                    $.act(ACT_DEL, WAN_CONN_DEVICE, instance.__stack);
                    bFound = true;
					if (INCLUDE_VDSLWAN && $.qd.dslType == "vdsl") {
						if ($.qd.vlan && instance.__stack == $.qd.vlan.__stack)
							$.qd.vlan = undefined;
					} else {
						if ($.qd.vc && instance.__stack == $.qd.vc.__stack)
							$.qd.vc = undefined;
					}
                }
            }
            if (bFound == true)
                $.exe(function(err) {
                    if (err) {
                        $.removeLoading();
                        $.alert(err);
                        return;
                    }
                    doAddConnection();
                });
            else
                doAddConnection();
        });
    } else {
        doAddConnection();
    }
}

function goPrev() {
    var connType = $("#" + $.qd.dslType + "ConnectionType option:selected").val();
    $.qd.type = connType;

    switch ($.qd.internetDiag) {
        case 1:
            loadSubPage("qsIsp.htm");
            break;
        case 2:
            loadSubPage("qsDiag.htm");
            break;
        default:
            $("#div_" + connType).triggerHandler("addAttrs");
            $.qf.prev();
            break;
    }
}

function getForwardingParams() {
    var err = 0;
    if (gatewayStack == "")
        return;
    if (gatewayType == "ppp" || gatewayType == "pppoa") {
        portMappingList = $.act(ACT_GS, WAN_PPP_CONN_PORTMAPPING, null, gatewayStack);
        portTriggerList = $.act(ACT_GS, PPP_CONN_PORTTRIGGERING, null, gatewayStack);
    } else if (gatewayType == "ip" || gatewayType == "ipoa") {
        portMappingList = $.act(ACT_GS, WAN_IP_CONN_PORTMAPPING, null, gatewayStack);
        portTriggerList = $.act(ACT_GS, IP_CONN_PORTTRIGGERING, null, gatewayStack);
    } else {
        $.alert("Unknow connection type: " + gatewayType);
        return;
    }
    err = $.exe();
    if (err) {
        $.alert(err);
        return;
    }
}

function chkVoipAvailable() {
    var pvcs = "";
    var voipConnType = "";
    var dslLinkCfg = {};
    var ptmLinkCfg = {};
    var ret = {
        step: 0,
        connDevStk: "",
        voipStk: ""
    };
    var ipCount = 0,
        pppCount = 0;
    var bFoundExistedVoip = false;
    var existedVoipConn = {};
    var bEncapConflict = false;
    var bATMConnConflict = false;
    var bPvcExisted = false;
    var numOfConnEntries = 0;
	var connCntWithExistedVoip = 0;
    var encapMode = "";

    /* no need to add iptv connection */
    if (!$.qd.dsl.voip) {
        bVoipAvailable = false;
        return ret;
    }

    $.each(ppps, function() {
        numOfConnEntries++;
        if (this.name.search("voip") != -1) {
            bFoundExistedVoip = true;
            existedVoipConn = this;
            ret.voipStk = this.__stack;
        }
		if (bFoundExistedVoip && $.stkPop(this.__stack, 1) == $.stkPop(existedVoipConn.__stack, 1))
			connCntWithExistedVoip++
    });
	
    $.each(ips, function() {
        numOfConnEntries++;
		if (bFoundExistedVoip && $.stkPop(this.__stack, 1) == $.stkPop(existedVoipConn.__stack, 1))
			connCntWithExistedVoip++
    });
    
    voipConnType = $.qd.dsl.voip.connType;
    encapMode = ($.qd.dsl.voip.encapMode == "VC-MUX" ? "VCMUX" : $.qd.dsl.voip.encapMode)
    /* check conflict */
    if ($.qd.dsl.voip.dslType == "adsl") {
        /* check pvc conflict with current connection */
        if ($.qd.dsl.voip.vpi == $.qd.dsl.vpi && $.qd.dsl.voip.vci == $.qd.dsl.vci) {
            if (voipConnType == "PPPoA" || voipConnType == "IPoA" || $.qd.type == "pppoa" || $.qd.type == "ipoa" || $.qd.dsl.voip.encapMode != $.qd.dsl.ATM) {
                bVoipAvailable = false;
                return ret;
            }
        }
        pvcs = "PVC:" + $.qd.dsl.voip.vpi + "/" + $.qd.dsl.voip.vci;
        $.each(adsls, function() {
            if (this.destinationAddress == pvcs) {
                dslLinkCfg = this;
                bPvcExisted = true;
                return false;
            }
        });
        $.each(ppps, function() {
            if ($.stkPop(this.__stack, 1) == dslLinkCfg.__stack)
                pppCount++;
        });

        $.each(ips, function() {
            if ($.stkPop(this.__stack, 1) == dslLinkCfg.__stack)
                ipCount++;
        });
        if (bPvcExisted == true) {
            bATMConnConflict = (voipConnType == "PPPoA" || voipConnType == "IPoA" || dslLinkCfg.linkType == "PPPoA" || dslLinkCfg.linkType == "IPoA");
            bEncapConflict = (encapMode != dslLinkCfg.ATMEncapsulation);
            if (bATMConnConflict || bEncapConflict) {
                /* conflict with an existed oA connection */
                /* if this existed connection is an voip connection and it's the only one connection in its connection device, we can delete it and add new connection */
                if (ipCount > 0) {
                    bVoipAvailable = false;
                } else if (pppCount == 0) {
                    if (bFoundExistedVoip == false)
                        ret.step = 4;
					else {
						if (connCntWithExistedVoip == 1)
							ret.step = 9;
                    else
							ret.step = 10;
					}
                    ret.connDevStk = dslLinkCfg.__stack;
                } else if (pppCount == 1) {
                    if (bFoundExistedVoip == true && $.stkPop(existedVoipConn.__stack, 1) == dslLinkCfg.__stack) {
						ret.step = 5;
						ret.connDevStk = dslLinkCfg.__stack;
					} else
						bVoipAvailable = false;
                } else {
                    /* there can't be more than one oA connection in the same WAN_DSL_LINK_CFG, so if there are more than one ppp connection, 
                     * there must be a encapsulation conflict, do nothing with it (even if there is an existed iptv connection)*/
                    bVoipAvailable = false;
                }
                return ret;
            }
        }
        if (bFoundExistedVoip) {
            if (bPvcExisted) {
				if ($.stkPop(existedVoipConn.__stack, 1) == dslLinkCfg.__stack)
                    ret.step = 1;
                    else {
					if (connCntWithExistedVoip == 1)
						ret.step = 6;
					else
						ret.step = 1;					
                    }
				ret.connDevStk = dslLinkCfg.__stack;
                } else {
                if (connCntWithExistedVoip == 1)
					ret.step = 5;
				else
					ret.step = 2;
            }
        } else {
            if (numOfConnEntries >= 8)
                bVoipAvailable = false;
            else {
                if (bPvcExisted) {
					ret.step = 7;
                    ret.connDevStk = dslLinkCfg.__stack;
                } else
					ret.step = 8;
            }
        }
    } else if (INCLUDE_VDSLWAN && $.qd.dsl.voip.dslType == "vdsl") {
        /* check vid conflict with current connection */
        if ($.qd.dsl.voip.vid == $.qd.dsl.vid) {
            bVoipAvailable = false;
            return ret;
        }
        bVidExisted = false;
        $.each(vdsls, function() {
            if (this.X_TP_Used == 1 && this.X_TP_VID == $.qd.dsl.voip.vid) {
                ptmLinkCfg = this;
                bVidExisted = true;
                return false;
            }
        });
		
        if (bVidExisted) {
			pppCount = 0;
			ipCount = 0;
        $.each(ppps, function() {
			    if ($.stkPop(this.__stack, 1) == ptmLinkCfg.__stack)
			        pppCount++;
        });
	        
        $.each(ips, function() {
			    if ($.stkPop(this.__stack, 1) == ptmLinkCfg.__stack)
			        ipCount++;
        });
			if (ipCount >= 1)
				bVoipAvailable = false;
			else if (pppCount == 1) {
				if (bFoundExistedVoip && $.stkPop(existedVoipConn.__stack, 1) == ptmLinkCfg.__stack)
                ret.step = 1;
				else
					bVoipAvailable = false;
                } else {
				if (bFoundExistedVoip == false)
					ret.step = 7;
                    else {
					if (connCntWithExistedVoip == 1)
						ret.step = 6;
					else
						ret.step = 1;					
                }
            }
			ret.connDevStk = ptmLinkCfg.__stack;
		} else if (bFoundExistedVoip) {
			if (connCntWithExistedVoip == 1)
				ret.step = 5;
			else
				ret.step = 2;
        } else {
            if (numOfConnEntries >= 8)
                bVoipAvailable = false;
                else
				ret.step = 8;
    }
}
    return ret;
}

function chkIptvAvailable() {
    var pvcs = "";
    var iptvConnType = "";
    var dslLinkCfg = {};
    var ptmLinkCfg = {};
    var ret = {
        step: 0,
        connDevStk: "",
        iptvStk: ""
    };
    var ipCount = 0,
        pppCount = 0;
    var bFoundExistedIptv = false;
    var existedIptvConn = {};
    var bEncapConflict = false;
    var bATMConnConflict = false;
    var bPvcExisted = false;
    var numOfConnEntries = 0;
	var connCntWithExistedIptv = 0;
    var encapMode = "";

    /* no need to add iptv connection */
    if (!$.qd.dsl.iptv) {
        bIptvAvailable = false;
        return ret;
    }
    /* caculate all the connections */
    $.each(ips, function() {
        numOfConnEntries++;
        if (this.name.search("iptv") != -1) {
            bFoundExistedIptv = true;
            existedIptvConn = this;
            ret.iptvStk = this.__stack;
        }
		if (bFoundExistedIptv == true && $.stkPop(existedIptvConn.__stack, 1) == $.stkPop(this.__stack, 1))
			connCntWithExistedIptv++;
    });
    $.each(ppps, function() {
        numOfConnEntries++;
		if (bFoundExistedIptv == true && $.stkPop(existedIptvConn.__stack, 1) == $.stkPop(this.__stack, 1))
			connCntWithExistedIptv++
    });
	
    iptvConnType = $.qd.dsl.iptv.connType;
    encapMode = ($.qd.dsl.iptv.encapMode == "VC-MUX" ? "VCMUX" : $.qd.dsl.iptv.encapMode)
    /* check conflict */
    if ($.qd.dsl.iptv.dslType == "adsl") {
        /* check pvc conflict with current connection */
        if ($.qd.dsl.iptv.vpi == $.qd.dsl.vpi && $.qd.dsl.iptv.vci == $.qd.dsl.vci) {
            if (iptvConnType == "PPPoA" || iptvConnType == "IPoA" || $.qd.type == "pppoa" || $.qd.type == "ipoa" || $.qd.dsl.iptv.encapMode != $.qd.dsl.ATM) {
                bIptvAvailable = false;
                return ret;
            }
        }
        pvcs = "PVC:" + $.qd.dsl.iptv.vpi + "/" + $.qd.dsl.iptv.vci;
        $.each(adsls, function() {
            if (this.destinationAddress == pvcs) {
                dslLinkCfg = this;
                bPvcExisted = true;
                return false;
            }
        });
        $.each(ppps, function() {
            if ($.stkPop(this.__stack, 1) == dslLinkCfg.__stack)
                pppCount++;
        });

        $.each(ips, function() {
            if ($.stkPop(this.__stack, 1) == dslLinkCfg.__stack) {
                ipCount++;
            }
        });
		
        if (bPvcExisted == true) {
            bATMConnConflict = (iptvConnType == "PPPoA" || iptvConnType == "IPoA" || dslLinkCfg.linkType == "PPPoA" || dslLinkCfg.linkType == "IPoA");
            bEncapConflict = (encapMode != dslLinkCfg.ATMEncapsulation);
            if (bATMConnConflict || bEncapConflict) {
                /* conflict with an existed oA connection */
                /* if this existed connection is an iptv connection and it's the only one connection in its connection device, we can delete it and add our new connection */
                if (pppCount > 0) {
                    bIptvAvailable = false;
                } else if (ipCount == 0) {
                    if (bFoundExistedIptv == false)
						ret.step = 4;
					else {
						if (connCntWithExistedIptv == 1)
							ret.step = 9;
                    else
							ret.step = 10;
					}
                    ret.connDevStk = dslLinkCfg.__stack;
                } else if (ipCount == 1) {
                    if (bFoundExistedIptv == true && $.stkPop(existedIptvConn.__stack, 1) == dslLinkCfg.__stack)
						ret.step = 5;
                    else
						bIptvAvailable = false;
                    ret.connDevStk = dslLinkCfg.__stack;
                } else {
                    /* there can't be more than one oA connection in the same WAN_DSL_LINK_CFG, so if there are more than one ip connection, 
                     * there must be a encapsulation conflict, do nothing with it (even if there is an existed iptv connection)*/
                    bIptvAvailable = false;
                }
                return ret;
            }
        }

        if (bFoundExistedIptv) {
            if (bPvcExisted) {
                if ($.stkPop(existedIptvConn.__stack, 1) == dslLinkCfg.__stack)
                    ret.step = 1;
                    else {
					if (connCntWithExistedIptv == 1)
						ret.step = 6;
					else
						ret.step = 1;
                    }
                } else {
                if (connCntWithExistedIptv == 1)
					ret.step = 5;
				else
					ret.step = 2;
            }
        } else {
            if (numOfConnEntries >= 8)
                bIptvAvailable = false;
            else {
                if (bPvcExisted)
                    ret.step = 7;
                else
                    ret.step = 8;				
            }
        }
		ret.connDevStk = dslLinkCfg.__stack;
    } else if (INCLUDE_VDSLWAN && $.qd.dsl.iptv.dslType == "vdsl") {
        /* check vid conflict with current connection */
        if ($.qd.dsl.iptv.vid == $.qd.dsl.vid) {
            bIptvAvailable = false;
            return ret;
        }
        bVidExisted = false;
        $.each(vdsls, function() {
            if (this.X_TP_Used == 1 && this.X_TP_VID == $.qd.dsl.iptv.vid) {
                ptmLinkCfg = this;
                bVidExisted = true;
                return false;
            }
        });
		
            if (bVidExisted) {
                    pppCount = 0;
			ipCount = 0;
                    $.each(ppps, function() {
			    if ($.stkPop(this.__stack, 1) == ptmLinkCfg.__stack)
                            pppCount++;
                    });
	        
			$.each(ips, function() {
			    if ($.stkPop(this.__stack, 1) == ptmLinkCfg.__stack)
			        ipCount++;
			});
			if (pppCount >= 1)
                bIptvAvailable = false;
			else if (ipCount == 1) {
				if (bFoundExistedIptv && $.stkPop(existedIptvConn.__stack, 1) == ptmLinkCfg.__stack)
					ret.step = 1;
				else
                    bIptvAvailable = false;
                } else {
				if (bFoundExistedIptv == false)
					ret.step = 7;
				else {
					if (connCntWithExistedIptv == 1)
                    ret.step = 6;
					else
						ret.step = 1;					
                }
            }
			ret.connDevStk = ptmLinkCfg.__stack;
		} else if (bFoundExistedIptv) {
			if (connCntWithExistedIptv == 1)
				ret.step = 5;
			else
				ret.step = 2;	
		} else {
			if (numOfConnEntries >= 8)
				bIptvAvailable = false;
			else
				ret.step = 8;
        }
    }
    return ret;
}
</script>
<div id="quicksetup_dsl_container">
    <form class="pure-form pure-form-aligned">
		<p id="t_dslSettingNote">Enter the parameters if your ISP provided some. Otherwise, click Next directly to continue.</p>
        <div id="div_dslType" style="margin-top: 40px;">
            <b id="t_l2IntfType">L2 Interface Type:</b>
            <input type="radio" name="radio_l2_intf_type" id="vdsl_radio" />
            <label>VDSL</label>
            <input type="radio" name="radio_l2_intf_type" id="adsl_radio" />
            <label>ADSL</label>
        </div>
        <div id="div_adsl">
            <div id="div_vpi">
                <b>VPI:</b>
                <input type="text" class="xl" id="vpi" value="8" />
            </div>
            <div id="div_vci">
                <b>VCI:</b>
                <input type="text" class="xl" id="vci" value="35" />
            </div>
            <div id="div_adslTag" class="nd">
                <div id="div_enTag">
                    <b>VLAN ID</b>
                    <input type="checkbox" class="xl" id="envtag" />
                    <label class="T_envlan">Enable VLAN ID</label>
                </div>
                <div id="div_vtag" class="nd">
                    <b>VLAN ID(1-4094):</b>
                    <input type="text" class="xl" maxlength="4" id="vtag" value="7" />
                </div>
            </div>
            <div id="div_adslConnType">
                <b class="T_conntype">Connection Type:</b>
                <select id="adslConnectionType" class="xl">
                    <option class="T_c_qsPPPoE" value="ppp">PPPoE</option>
                    <option class="T_c_qsPPPoA" value="pppoa">PPPoA</option>
                    <option class="T_c_qsDynIp" value="dhcp">Dynamic IP</option>
                    <option class="T_c_qsStaIp" value="staip">Static IP</option>
                    <option class="T_c_qsIPoA" value="ipoa">IPoA</option>
                    <option class="T_bridge" value="br">Bridge</option>
                </select>
            </div>
        </div>
        <div id="div_vdsl" class="nd">
            <div id="div_enVlan">
                <b id="t_vlan">VLAN:</b>
                <input type="checkbox" class="xl" id="envid" />
                <label id="t_enVid">Enable VLAN ID</label>
            </div>
            <div id="div_vid" class="nd">
                <b id="t_tag">VLAN ID(1-4094):</b>
                <input type="text" class="xl" id="vid" value="1" />
            </div>
            <div id="div_vdslConnType">
                <b class="T_conntype">Connection Type:</b>
                <select id="vdslConnectionType" class="xl">
                    <option class="T_c_qsPPPoE" value="ppp">PPPoE</option>
                    <option class="T_c_qsDynIp" value="dhcp">Dynamic IP</option>
                    <option class="T_c_qsStaIp" value="staip">Static IP</option>
                    <option class="T_bridge" value="br">Bridge</option>
                </select>
            </div>
        </div>
        <div id="div_connType">
            <div id="div_ppp" class="nd">
                <div>
                    <b class="T_pppusr">User Name:</b>
                    <input type="text" class="xl" id="ppp_username" maxlength="255" />
                </div>
                <div>
                    <b class="T_ppppwd">Password:</b>
                    <input type="password" class="xl" id="ppp_password" maxlength="255" />
                </div>
                <div>
                    <b class="T_cfmpwd">Confirm Password:</b>
                    <input type="password" class="xl" id="ppp_cfmpassword" maxlength="255" />
                </div>
            </div>
            <div id="div_pppoa" style="display: none;">
                <div>
                    <b class="T_pppusr">User Name:</b>
                    <input type="text" class="xl" id="pppoa_username" maxlength="255" />
                </div>
                <div>
                    <b class="T_ppppwd">Password:</b>
                    <input type="password" class="xl" id="pppoa_password" maxlength="255" />
                </div>
                <div>
                    <b class="T_cfmpwd">Confirm Password:</b>
                    <input type="password" class="xl" id="pppoa_cfmpassword" maxlength="255" />
                </div>
            </div>
            <div id="div_dhcp" style="display: none;">
            </div>
            <div id="div_staip" style="display: none;">
                <div>
                    <b class="T_c_ipaddr">IP Address:</b>
                    <input type="text" class="xl" maxlength="15" value="0.0.0.0" id="staip" />
                </div>
                <div>
                    <b class="T_c_mask">Subnet Mask:</b>
                    <input type="text" class="xl" maxlength="15" value="0.0.0.0" id="staipmask" />
                </div>
                <div>
                    <b class="T_c_gw">Gateway:</b>
                    <input type="text" class="xl" maxlength="15" value="0.0.0.0" id="staipgw" />
                </div>
                <div>
                    <b class="T_c_priDns">DNS Server:</b>
                    <input type="text" class="xl" maxlength="15" value="0.0.0.0" id="staipdns1" />
                    <span class="T">(optional)</span>
                </div>
                <div>
                    <b class="T_c_secDns">Secondary DNS Server:</b>
                    <input type="text" class="xl" maxlength="15" value="0.0.0.0" id="staipdns2" />
                    <span class="T">(optional)</span>
                </div>
            </div>
            <div id="div_ipoa" style="display: none;">
                <div>
                    <b class="T_c_ipaddr">IP Address:</b>
                    <input type="text" class="xl" maxlength="15" value="0.0.0.0" id="ipoa" />
                </div>
                <div>
                    <b class="T_c_mask">Subnet Mask:</b>
                    <input type="text" class="xl" maxlength="15" value="0.0.0.0" id="ipoamask" />
                </div>
                <div>
                    <b class="T_c_gw">Gateway:</b>
                    <input type="text" class="xl" maxlength="15" value="0.0.0.0" id="ipoagw" />
                </div>
                <div>
                    <b class="T_c_priDns">DNS Server:</b>
                    <input type="text" class="xl" maxlength="15" value="0.0.0.0" id="ipoadns1" />
                    <span class="T">(optional)</span>
                </div>
                <div>
                    <b class="T_c_secDns">Secondary DNS Server:</b>
                    <input type="text" class="xl" maxlength="15" value="0.0.0.0" id="ipoadns2" />
                    <span class="T">(optional)</span>
                </div>
            </div>
            <div id="div_br" style="display: none;">
            </div>
        </div>
    </form>
</div>
<div class="inline-btn-right quicksetup-button-container">
    <div class="inline">
        <button type="submit" class="green T_back" id="back" onclick="goPrev()">Back</button>
    </div>
    <div class="inline">
        <button type="submit" class="green T_next" id="next" onclick="goNext()">Next</button>
    </div>
</div>
<script type="text/javascript" language="javascript">
var currDslMode = "";

function init() {
    $("#div_ppp").bind("initAttrs", initPPPoEAttrs);
    $("#div_ppp").bind("addAttrs", addPPPoEAttrs);
    $("#div_ppp").bind("chkValidation", chkPPPoEAttrs);

    $("#div_pppoa").bind("initAttrs", initPPPoAAttrs);
    $("#div_pppoa").bind("addAttrs", addPPPoAAttrs);
    $("#div_pppoa").bind("chkValidation", chkPPPoAAttrs);

    $("#div_staip").bind("initAttrs", initStaticIpAttrs);
    $("#div_staip").bind("addAttrs", addStaticIpAttrs);
    $("#div_staip").bind("chkValidation", chkStaticIpAttrs);

    $("#div_ipoa").bind("initAttrs", initIPoAAttrs);
    $("#div_ipoa").bind("addAttrs", addIPoAAttrs);
    $("#div_ipoa").bind("chkValidation", chkIPoAAttrs);

	$("#div_dhcp").bind("initAttrs", initDynamicIPAttrs);
	
	$("#div_br").bind("initAttrs", initBridgeAttrs);
	
	if (INCLUDE_VDSLWAN) {
		$("#vdslConnectionType").click(function() {
			if (!$("#div_vdsl").hasClass("nd"))
		    showConnType($("#vdslConnectionType").data("value"));
		});
		$("#envid").on("click", doEnableVid);
	}
    if (INCLUDE_WAN_VLAN)
        $("#envtag").on("click", doEnableVtag);
    $("#adsl_radio").on("click", function() {
        doDslTypeChange("adsl");
    });
    $("#adslConnectionType").click(function() {
		if (!$("#div_adsl").hasClass("nd"))
        showConnType($("#adslConnectionType").data("value"));
    });
		
    if ($.qd.dsl.isp == "Other" && INCLUDE_VDSLWAN) {
        if ($.qd.currDslType == "Unknown")
            $("#div_dslType").removeClass("nd");
        else
            $("#div_dslType").addClass("nd");
    } else
        $("#div_dslType").addClass("nd");

    if (INCLUDE_VDSLWAN) {
        $("#" + $.qd.dslType + "_radio").prop("checked", true);
        doDslTypeChange($.qd.dslType);
    }
    getGatewayInfo();
    if (INCLUDE_VOIP)
        getVoiceInfo();
    initConnType();
    getForwardingParams();
}
(function() {
    $.tpInit(init);
	
    if (INCLUDE_VDSLWAN) {
        var dslCommIntfCfgList = {};
        var dslIntfCfgList = {};
        $("#vdsl_radio").on("click", function() {
            doDslTypeChange("vdsl");
        });
        
        dslCommIntfCfgList = $.act(ACT_GL, WAN_COMMON_INTF_CFG, null, null, ["WANAccessType"]);
        dslIntfCfgList = $.act(ACT_GL, WAN_DSL_INTF_CFG, null, null, ["LinkEncapsulationUsed"]);

        $.exe(function(err) {
            if (err) {
                $.alert(err);
                return;
            }
            for (var i = 0; i < dslCommIntfCfgList.length; i++) {
                if (dslCommIntfCfgList[i].WANAccessType == "DSL") {
                    if (dslIntfCfgList[i].linkEncapsulationUsed == "G.992.3_Annex_K_ATM")
                        currDslMode = "adsl";
                    else if (dslIntfCfgList[i].linkEncapsulationUsed == "G.993.2_Annex_K_PTM")
                        currDslMode = "vdsl";
                }
            }
        });
    }
})();
</script>
