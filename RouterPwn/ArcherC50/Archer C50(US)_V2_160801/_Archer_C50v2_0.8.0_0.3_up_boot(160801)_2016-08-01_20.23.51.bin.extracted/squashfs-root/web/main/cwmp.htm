<script type="text/javascript">
var tmpInformInterval;
var tmpCwmpFlag;
$("#cwmp_on").click(function()
{
	$.addLoading($(this));
	$.act(ACT_SET, MANAGEMENT_SERVER, null, null, ["EnableCWMP=1"]);
	$.exe(function(err){
		$.removeLoading();
		if(!err)
		{
			$.reload();
		}
	});
});
$("#cwmp_off").click(function()
{
	$.addLoading($(this));
	$.act(ACT_SET, MANAGEMENT_SERVER, null, null, ["EnableCWMP=0"]);
	$.exe(function(err){
		$.removeLoading();
		if(!err)
		{
			$.reload();
		}
	});
});

$("#inform_on").click(function()
{
	$.addLoading($(this));
	$.act(ACT_SET, MANAGEMENT_SERVER, null, null, ["PeriodicInformEnable=1"]);
	$.exe(function(err){
		$.removeLoading();
		if(!err)
		{
			$.reload();
		}
	});
});
$("#inform_off").click(function()
{
	$.addLoading($(this));
	$.act(ACT_SET, MANAGEMENT_SERVER, null, null, ["PeriodicInformEnable=0"]);
	$.exe(function(err){
		$.removeLoading();
		if(!err)
		{
			$.reload();
		}
	});
});
$("#soap_on").click(function()
{
	$.addLoading($(this));
	tmpCwmpFlag |= 0x0010 ;
	$.act(ACT_SET, MANAGEMENT_SERVER, null, null, ["X_TP_Flag="+tmpCwmpFlag]);
	$.exe(function(err){
		$.removeLoading();
		if(!err)
		{
			$.reload();
		}
	});
});
$("#soap_off").click(function()
{
	tmpCwmpFlag &= (~0x0010);
	$.act(ACT_SET, MANAGEMENT_SERVER, null, null, ["X_TP_Flag="+tmpCwmpFlag]);
	$.exe(function(err){
		$.removeLoading();
		if(!err)
		{
			$.reload();
		}
	});
});

$("#t_save").click(function()
{
	$.addLoading($(this));
	var cwmpObj = {};
	var cwmpFlag;

	if ((!$.num($("#inform_interval").prop('value'), true)) == true)
	{
		cwmpObj.periodicInformInterval = $("#inform_interval").prop('value');
	}
	else
	{
		tmpInformInterval = $("#inform_interval").prop('value');
		cwmpObj.periodicInformInterval = parseInt(tmpInformInterval, 10);
	}
		
	if (($("#acs_url").prop('value') == ""))
	{
		$.alert(ERR_CWMP_URL_INVAD);
		var element = $("#acs_url");
		if(element){
			element.focus();
			element.select();
		}
		return;
	}
	else
	{
		cwmpObj.URL = $("#acs_url").prop('value');
	}
	cwmpObj.username = $("#acs_user_name").prop('value');
	cwmpObj.password = $("#acs_user_pwd").prop('value');
	cwmpObj.X_TP_BoundIfName = $("#wanInf").data('value');
	if ($("#CR_Auth_en").prop('data-checked'))
	{
		tmpCwmpFlag &= (~0x0080);
	}
	else
	{
		tmpCwmpFlag |= 0x0080;
	}
	
	cwmpObj.X_TP_Flag = tmpCwmpFlag;
	cwmpObj.connectionRequestUsername = $("#CR_name").prop('value');
	cwmpObj.connectionRequestPassword = $("#CR_pwd").prop('value');
	if ($("#CR_path").prop('value').charAt(0) != "/")
	{
		$.alert(ERR_CWMP_PATH_INVAD);
		var element = $("#CR_path");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}
	else
	{
		cwmpObj.X_TP_connReqPath = $("#CR_path").prop('value');
	}

	if ((!$.num($("#CR_port").prop('value'), true)) && ($("#CR_port").prop('value') >= 1000))
	{
		cwmpObj.X_TP_ConnReqPort = parseInt($("#CR_port").prop('value'), 10);
	}
	else
	{
		$.alert(ERR_CWMP_PORT_INVAD);
		var element = $("#CR_port");
		if(element){
			element.focus();
			element.select();
		}
		return false;
	}

	$.act(ACT_SET, MANAGEMENT_SERVER, null, null, cwmpObj);
	$.exe(function(ret){ 
		$.removeLoading();
		if (!ret) 
			$.reload(); 
	});

});
$("#getRPCMethods").click(function()
{
	var cwmpFlag = tmpCwmpFlag | 0x0004;
	$.act(ACT_SET, MANAGEMENT_SERVER, null, null, ["X_TP_Flag=" + cwmpFlag]);
	$.exe(function(ret){
		if (!ret) $.reload('cwmp.htm');
	});
});
$("#CR_Auth_en").click(function()
{
	if ($("#CR_Auth_en").prop("data-checked"))
	{
		$("#CR").removeClass("nd");
	}
	else
	{
		$("#CR").addClass("nd");
	}
});
function init()
{
	var cwmpObj = $.act(ACT_GET, MANAGEMENT_SERVER, null, null);
	var wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "name", "X_TP_IfName", "connectionType"]);
	var wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "name", "X_TP_IfName"]);
	if (!$.exe())
	{
		if (cwmpObj.enableCWMP == 1)
		{
			$("#cwmp_on").addClass('selected');
			$("#cwmp_off").removeClass('selected');
		}
		else
		{
			$("#cwmp_on").removeClass('selected');
			$("#cwmp_off").addClass('selected');
		}
		if (cwmpObj.periodicInformEnable == 1)
		{
			$("#inform_on").addClass('selected');
			$("#inform_off").removeClass('selected');
		}
		else
		{
			$("#inform_on").removeClass('selected');
			$("#inform_off").addClass('selected');
		}
		$("#inform_interval").prop('value', cwmpObj.periodicInformInterval);
		tmpInformInterval = cwmpObj.periodicInformInterval;
		$("#acs_url").prop('value', cwmpObj.URL);
		$("#acs_user_name").prop('value', cwmpObj.username);
		$("#acs_user_pwd").prop('value', cwmpObj.password);

		for (var i = 0; i < wanIPList.length; i++)
		{	
			if ((wanIPList[i].connectionType == "IP_Routed") && (wanIPList[i].enable == 1))
			{
				var optText = wanIPList[i].name;
				var optVal = wanIPList[i].X_TP_IfName;
				$("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
			}
		}
		for (var j = 0; j < wanPPPList.length; j++)
		{
			if (wanPPPList[j].enable == 1)
			{
				var optText = wanPPPList[j].name;
				var optVal = wanPPPList[j].X_TP_IfName;
				$("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
			}
		}
		$('#wanInf option[value="' + cwmpObj.X_TP_BoundIfName + '"]').prop('selected', 'selected');
		var options = {};
		options.refresh = 1;
		$("#wanInf").tpSelect(options);
	
		tmpCwmpFlag = cwmpObj.X_TP_Flag;
		if ((cwmpObj.X_TP_Flag & 0x0010) != 0)
		{
			$("#soap_on").addClass('selected');
			$("#soap_off").removeClass('selected');
		}
		else
		{
			$("#soap_on").removeClass('selected');
			$("#soap_off").addClass('selected');
		}

		if ((cwmpObj.X_TP_Flag  & 0x0080) != 0)
		{
			$("#CR_Auth_en").prop('checked', false);
			$("#CR").addClass("nd");
		}
		else
		{
			$("#CR_Auth_en").prop('checked', true);
			$("#CR").removeClass("nd");
		}
		$("#CR_name").prop('value', cwmpObj.connectionRequestUsername);
		$("#CR_pwd").prop('value', cwmpObj.connectionRequestPassword);
		$("#CR_url").prop('value', cwmpObj.connectionRequestURL);
		$("#CR_path").prop('value', cwmpObj.X_TP_connReqPath);
		$("#CR_port").prop('value', cwmpObj.X_TP_ConnReqPort);
	}
}
</script>
<h3 id="et">CWMP Settings</h3>
<div class="content-container">
	<form class="pure-form pure-form-aligned">
		<p class="cfg-line" id="t_info">WAN Management Protocol (also called TR-069) allows the Auto-Configuration Server (ACS) to perform auto-configuration, provision, collection, and diagnostics to this device. You may configure this function under your ISP's instructions.</p>
		<div class="button-group-container">
			<b class="xxxl" id="t_cwmp">CWMP: </b>
			<ul>
				<li>
					<button id="cwmp_on" class="fst" value="on">On</button>
				</li>
				<li>
					<button id="cwmp_off" class="lst" value="off">Off</button>
				</li>
			</ul>
		</div>
		<div class="button-group-container">
			<b class="xxxl" id="t_inform">Inform: </b>
			<ul>
				<li>
					<button id="inform_on" class="fst" value="on">On</button>
				</li>
				<li>
					<button id="inform_off" class="lst" value="off">Off</button>
				</li>
			</ul>
		</div>
		<br />
		<div>
			<b class="xxxl" id="t_interval">Inform Interval: </b>
			<input class="xl" type="text" size="15" id="inform_interval" >
		</div>
		<div>
			<b class="xxxl" id="t_acsurl">ACS URL: </b>
			<input class="xl" type="text" size="15" id="acs_url" >
		</div>
		<div>
			<b class="xxxl" id="t_acsusername">ACS Username: </b>
			<input class="xl" type="text" size="15" id="acs_user_name" >
		</div>
		<div>
			<b class="xxxl" id="t_acspasswd">ACS Password: </b>
			<input class="xl" type="password" size="15" id="acs_user_pwd" >
		</div>
		<div>
			<b class="xxxl" id="t_if">Interface used by TR-069 client: </b>
			<select class="xl" id="wanInf">
				<option value="Any_WAN" id="t_anywan">Any_WAN</option>
				<option value="LAN" id="t_lan">LAN</option>
			</select>
		</div>
		<div class="button-group-container">
			<b class="xxxl" id="t_display">Display SOAP messages on serial console: </b>
			<ul>
				<li>
					<button id="soap_on" class="fst" value="on">On</button>
				</li>
				<li>
					<button id="soap_off" class="lst" value="off">Off</button>
				</li>
			</ul>
		</div>
		<br />
		
		<div>
			<input class="xl" type="checkbox" id="CR_Auth_en"/>
			<label id="t_auth">Connection Request Authentication</label>
		</div>
		<div id="CR">
			<div>
				<b class="xxxl" id="t_cr_name">Connection Request Username: </b>
				<input class="xl" type="text" size="15" id="CR_name" >
			</div>
			<div>
				<b class="xxxl" id="t_cr_pwd">Connection Request Password: </b>
				<input class="xl" type="password" size="15" id="CR_pwd" >
			</div>
			<div>
				<b class="xxxl" id="t_cr_path">Connection Request Path: </b>
				<input class="xl" type="text" size="15" id="CR_path" >
			</div>
			<div>
				<b class="xxxl" id="t_cr_port">Connection Request Port: </b>
				<input class="xl" type="text" size="15" id="CR_port" >
			</div>
			<div>
				<b class="xxxl" id="t_cr_url">Connection Request URL: </b>
				<input class="xl" type="text" size="15" id="CR_url" >
			</div>
		</div>

		<button type="submit" id="getRPCMethods" class="blue left xxl">Get RPC Methods</button>
		<div class="part-separate">
			<button type="submit" id="t_save"  class="green T_save">Save</button> 
		</div>
	</form>
</div>
<script type="text/javascript">
$.tpInit(init);
</script>