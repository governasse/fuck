<script type="text/javascript">
var wlanObj_2g,
    wlanObj_5g,
    mssidObj_2g,
    mssidObj_5g,
    vapList_2g,
    vapList_5g,
    guestnetObj_2g,
    guestnetObj_5g,
    guestVap_2g,
    guestVap_5g,
    qssEnable_2g,
    qssEnable_5g;

function isHex(str, arg) {
    str = str.toLowerCase();
    for (var i = 0; i < str.length; i++) {
        if ((str.charAt(i) >= '0' && str.charAt(i) <= '9') || (str.charAt(i) >= 'a' && str.charAt(i) <= 'f'))
            continue;
        else {
            if (arg != 0)
                $.alert(ERR_WLAN_WEP_KEY_HEX_INVALID);
            return false;
        }
    }
    if (parseInt(str, 16) == 0) {
        if (arg != 0)
            $.alert(ERR_WLAN_WEP_KEY_HEX_INVALID);
        return false;
    }
    return true;
}

function checkSSID(band) {
    var s = $('#ssid' + band);
    var ssidLen = $.realLen(s.prop('value'));

    if (INCLUDE_LAN_WLAN_MSSID) {
        /*var index = 1;

        for (index = 1; index < ssidNum; index++) {
            var cp1 = $.id("ssid").value;
            var cp2 = $.id("ssid" + index).value;
            if (cp1 == cp2) {
                $.alert(CMM_WLAN_SSID_CONFLICTE);
                s.focus();
                s.select();
                return false;
            }
        }

        for (index = 1; index < ssidNum; index++) {
            var cp1 = $.id("ssid" + index).value;
            var loop = 0;
            for (loop = index + 1; loop < ssidNum; loop++) {
                var cp2 = $.id("ssid" + loop).value;
                if (cp1 == cp2) {
                    $.alert(CMM_WLAN_SSID_CONFLICTE);
                    $.id("ssid" + index).focus();
                    $.id("ssid" + index).select();
                    return false;
                }
            }
        }*/

        if (INCLUDE_LAN_WLAN_GUESTNETWORK) {
            if (s.prop('value') == guestVap_2g.SSID || s.prop('value') == guestVap_5g.SSID) {
                $.alert(CMM_WLAN_SSID_CONFLICTE_WITH_GUESTNET);
                s.focus();
                s.select();
                return false;
            }
            /*            for (index = 1; index < ssidNum; index++) {
                if ($.id("ssid" + index).value == guestVap.ssid) {
                    $.alert(CMM_WLAN_SSID_CONFLICTE_WITH_GUESTNET);
                    $.id("ssid" + index).focus();
                    $.id("ssid" + index).select();
                    return false;
                }
            }*/
        }
    }
    if (ssidLen <= 0) {
        $.alert(ERR_WLAN_SSID_IS_EMPTY);
        s.focus();
        s.select();
        return false;
    } else if (ssidLen > 32) {
        $.alert(ERR_WLAN_SSID_LEN_OUTRANGE);
        s.focus();
        s.select();
        return false;
    }
    /* else if (INCLUDE_LAN_WLAN_MSSID) {
        for (index = 1; index < ssidNum; index++) {
            var s2 = $.id("ssid" + index);
            var ssidLen2 = $.realLen(s2.value);
            if (ssidLen2 <= 0) {
                $.alert(ERR_WLAN_SSID_IS_EMPTY);
                s2.focus();
                s2.select();
                return false;
            } else if (ssidLen2 > 32) {
                $.alert(ERR_WLAN_SSID_LEN_OUTRANGE);
                s2.focus();
                s2.select();
                return false;
            }
        }
    }*/

    return true;
}

function checkPersonal(band) {
    var t = $('#wpa2PersonalPwd' + band);
    var pwd = t.prop('value');

    if (pwd.length == 0) {
        $.alert(ERR_WLAN_WPA_PSK_EMPTY);
        t.focus();
        t.select();
        return false;
    } else if (pwd.length < 8) {
        $.alert(ERR_WLAN_WPA_PSK_LENGTH_INVALID);
        t.focus();
        t.select();
        return false;
    } else if (pwd.length >= 64) {
        if (!isHex(pwd, 0)) {
            $.alert(ERR_WLAN_WPA_PSK_HEX_INVALID);
            t.focus();
            t.select();
            return false;
        }
        t.prop('value', t.prop('value').substr(0, 64));
    } else {
        if ($.asc(pwd, true)) {
            $.alert(ERR_WLAN_WPA_PSK_ASCII_INVALID);
            t.focus();
            t.select();
            return false;
        }
    }
    /*    if ($.num($.id("interval").value, 0, [30, 999999999], true)) {
        $.alert(ERR_WLAN_WPA_INTERVAL_INVALID);
        return false;
    }*/
    if ((qssEnable_2g == 1 && band == '_2g') ||
        (qssEnable_5g == 1 && band == '_5g')) {
        if ($("#encrypPersonalTkip" + band).prop('checked')) {
            $.alert(ERR_WLAN_QSS_TKIP_CONFLICT);
            return false;
        }
    }
    return true;
}

function init() {
    var basicList = $.act(ACT_GL, LAN_WLAN, null, null, [
        "name",
        "Standard",
        "SSID",
        "X_TP_Band",
        "Enable",
        "RegulatoryDomain",
        "SSIDAdvertisementEnabled",
        "BeaconType",
        "BasicEncryptionModes",
        "WPAEncryptionModes",
        "IEEE11iEncryptionModes",
        "beaconType",
        "BasicEncryptionModes",
        "BasicAuthenticationMode",
        "WPAEncryptionModes",
        "WPAAuthenticationMode",
        "IEEE11iEncryptionModes",
        "IEEE11iAuthenticationMode",
        "X_TP_PreSharedKey"
    ]);
    if (!$.exe()) {
        $.each(basicList, function() {
            if ("2.4GHz" == this.X_TP_Band) {
                wlanObj_2g = this;
            } else if ( /*INCLUDE_LAN_WLAN_DUALBAND &&*/ "5GHz" == this.X_TP_Band) {
                wlanObj_5g = this;
            }
        });

        wpsObj_2g = $.act(ACT_GET, LAN_WLAN_WPS, wlanObj_2g.__stack, null, ["Enable"]);
        wpsObj_5g = $.act(ACT_GET, LAN_WLAN_WPS, wlanObj_5g.__stack, null, ["Enable"]);
        mssidObj_2g = $.act(ACT_GET, LAN_WLAN_MULTISSID, wlanObj_2g.__stack, null, ["MultiSSIDEnable"]);
        mssidObj_5g = $.act(ACT_GET, LAN_WLAN_MULTISSID, wlanObj_5g.__stack, null, ["MultiSSIDEnable"]);
        vapList_2g = $.act(ACT_GS, LAN_WLAN_MSSIDENTRY, null, wlanObj_2g.__stack, ["Name"]);
        vapList_5g = $.act(ACT_GS, LAN_WLAN_MSSIDENTRY, null, wlanObj_5g.__stack, ["Name"]);
        guestnetObj_2g = $.act(ACT_GET, LAN_WLAN_GUESTNET, wlanObj_2g.__stack, null, ["Enable", "Name"]);
        guestnetObj_5g = $.act(ACT_GET, LAN_WLAN_GUESTNET, wlanObj_5g.__stack, null, ["Enable", "Name"]);
        if (!$.exe()) {
            qssEnable_2g = wpsObj_2g.enable;
            qssEnable_5g = wpsObj_5g.enable;
            $.each(vapList_2g, function(arg, index) {
                if (this.name == guestnetObj_2g.name)
                    guestVap_2g = this;
            });
            $.each(vapList_5g, function(arg, index) {
                if (this.name == guestnetObj_5g.name)
                    guestVap_5g = this;
            });
        }
    }

    initParamShow(wlanObj_2g, '_2g');
    initParamShow(wlanObj_5g, '_5g');
    initSecShow(wlanObj_2g, '_2g');
    initSecShow(wlanObj_5g, '_5g');
}

function initParamShow(wlanObj, band) {
    if (wlanObj.enable == 1) {
        $('#wlEn' + band).prop('checked', 'checked');
        $('#wlEn' + band).prop('disabled', false);
    } else if ((wlanObj.regulatoryDomain == 'BD ' ||
            wlanObj.regulatoryDomain == 'KZ ' ||
            wlanObj.regulatoryDomain == 'SY ' ||
            wlanObj.regulatoryDomain == 'YE ') && band == '_5g') {
        $('#wlEn' + band).prop('checked', false);
        $('#wlEn' + band).prop('disabled', true);
    }
    $('#wlEn' + band).data('tpCheckbox').refresh();

    $('#ssid' + band).prop('value', wlanObj.SSID);

    if (wlanObj.SSIDAdvertisementEnabled == 0) {
        $('#hideSSID' + band).prop('checked', 'checked');
    }
}

function initSecShow(wlanObj, band) {
    if (initSecType(wlanObj, band) === false) {
        $('#wlEn' + band).prop('disabled', true);
        $('#hideSSID' + band).prop('disabled', true);
        $('#ssid' + band).prop('disabled', true);
        $('#wpa2PersonalPwd' + band).prop('disabled', true);
    } else {
        initWpa2Personal(wlanObj, band);
    }

}

function initSecType(wlanObj, band) {
    if (wlanObj.beaconType == 'Basic' && wlanObj.basicEncryptionModes == 'None') {
        $('#wpa2PersonalPwd' + band).prop('value', '');
        $.errorTip(('wlEn' + band), n_str.wirelessBasic.t_nopwd);
        return false;
    } else if (wlanObj.beaconType == 'WPA') {
        if (wlanObj.WPAAuthenticationMode == 'PSKAuthentication') {
            return true;
        } else {
            $('#wpa2PersonalPwd' + band).prop('value', '');
            $.errorTip(('wlEn' + band), n_str.wirelessBasic.t_enterprise);
            return false;
        }
    } else if (wlanObj.beaconType == '11i' || wlanObj.beaconType == 'WPAand11i') {
        if (wlanObj.IEEE11iAuthenticationMode == 'PSKAuthentication') {
            return true;
        } else {
            $('#wpa2PersonalPwd' + band).prop('value', '');
            $.errorTip(('wlEn' + band), n_str.wirelessBasic.t_enterprise);
            return false;
        }
    } else if (wlanObj.beaconType == 'Basic' && wlanObj.basicEncryptionModes == 'WEPEncryption') {
        $('#wpa2PersonalPwd' + band).prop('value', '');
        $.errorTip(('wlEn' + band), n_str.wirelessBasic.t_wep);
        return false;
    }
}

function initWpa2Personal(wlanObj, band) {
    $('#wpa2PersonalPwd' + band).prop('value', wlanObj.X_TP_PreSharedKey);
}

function check(band) {
    if (checkSSID(band) == false) {
        return false;
    }
    if (checkPersonal(band) == false) {
        return false;
    }
}

function saveDM(wlanObj, band) {
    var wlSettings = {};
    var type;

    wlSettings.enable = $('#wlEn' + band).prop('data-checked') ? 1 : 0;
    wlSettings.SSID = $('#ssid' + band).prop('value');
    wlSettings.SSIDAdvertisementEnabled = $('#hideSSID' + band).prop('data-checked') ? 0 : 1;
    wlSettings.X_TP_PreSharedKey = $('#wpa2PersonalPwd' + band).prop('value');

    $.act(ACT_SET, LAN_WLAN, wlanObj.__stack, null, wlSettings);
}

$('#save').on('click.wlBasic', function(e) {
    if (!$('#wlEn_2g').prop('disabled')) {
        if (check('_2g') == false) {
            return;
        }
        $.addLoading($(this));
        saveDM(wlanObj_2g, '_2g');
    }
    if (!$('#wlEn_5g').prop('disabled')) {
        if (check('_5g') == false) {
            return;
        }
        $.addLoading($(this));
        saveDM(wlanObj_5g, '_5g');
    }

    $.exe(function() {
        $.removeLoading();
    });
});
</script>
<h3 class="T_wl">Wireless Network</h3>

<div class="content-container">
    <form class="pure-form pure-form-aligned">
        <div>
            <b class="T_ghz24 l">Wireless 2.4GHz:</b>
            <input type="checkbox" id="wlEn_2g" />
            <label class="T_wlradioen">Enable Wireless Radio</label>
        </div>

        <div class="inline">
            <b class="T_wlname l">Wireless Network Name (SSID):</b>
            <input type="text" maxlength="32" class="xl" id="ssid_2g" />
        </div>
        <div class="inline">
            <input type="checkbox" id="hideSSID_2g" />
            <label class="T_hidessid">Hide SSID</label>
        </div>
        <div class="pure-control-group inline">
            <b class="T_passwd l">Password:</b>
            <input type="text" maxlength="64" class="tp-input-text xl" id="wpa2PersonalPwd_2g" />
        </div>
        <div class="inline">
            <p class="cfg-line" id="notice_2g">
                <span></span>
            </p>
        </div>

        <div class="part-separate">
            <b class="T_ghz5 l">Wireless 5GHz:</b>
            <input type="checkbox" id="wlEn_5g" />
            <label class="T_wlradioen">Enable Wireless Radio</label>
        </div>
        <div class="inline">
            <b class="T_wlname l">Wireless Network Name (SSID):</b>
            <input type="text" maxlength="32" class="xl" id="ssid_5g" />
        </div>
        <div class="inline">
            <input type="checkbox" id="hideSSID_5g" />
            <label class="T_hidessid">Hide SSID</label>
        </div>
        <div class="pure-control-group inline">
            <b class="T_passwd l">Password:</b>
            <input type="text" maxlength="64" class="tp-input-text xl" id="wpa2PersonalPwd_5g" />
        </div>
        <div class="inline">
            <p class="cfg-line" id="notice_5g">
                <span></span>
            </p>
        </div>
        <button type="submit" class="green T_save" id="save">Save</button>
    </form>
</div>

<script type="text/javascript">
$.tpInit(init);
</script>
